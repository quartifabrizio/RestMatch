<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ricerca Utenti | RestMatch</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            padding-bottom: 60px; /* Space for footer */
        }
        
        /* Navbar styles */
        .navbar {
            background-color: #222831;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .navbar-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .logo {
            color: #fff;
            font-size: 1.5rem;
            font-weight: 700;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .logo i {
            color: #ff5722;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 1.5rem;
        }
        
        .nav-links li a {
            color: #ddd;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }
        
        .nav-links li a:hover, .nav-links li a.active {
            color: #ff5722;
        }
        
        .logout-btn {
            background-color: transparent;
            color: #ddd;
            border: 1px solid #ff5722;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }
        
        .logout-btn:hover {
            background-color: #ff5722;
            color: #fff;
        }
        
        /* Container styles */
        .container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        
        h1 {
            font-size: 2rem;
            color: #333;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        h1 i, h2 i {
            color: #ff5722;
        }
        
        .description {
            color: #666;
            margin-bottom: 2rem;
        }
        
        /* Card styles */
        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        
        h2 {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        /* Button styles */
        .btn-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin: 1.5rem 0;
        }
        
        .btn {
            background-color: #ff5722;
            color: #fff;
            border: none;
            padding: 0.7rem 1.2rem;
            border-radius: 4px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn:hover {
            background-color: #e64a19;
        }
        
        .btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        
        /* Results styles */
        #results {
            margin-top: 2rem;
            min-height: 200px;
        }
        
        .user-item {
            background-color: #f9f9f9;
            border-radius: 6px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 3px solid #ff5722;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .user-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: #666;
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-info p {
            margin-bottom: 0.5rem;
        }
        
        .user-name {
            font-weight: 600;
            font-size: 1.1rem;
            color: #333;
        }
        
        .user-meta {
            color: #666;
            font-size: 0.9rem;
        }
        
        .user-role {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            background-color: #e0e0e0;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-top: 0.5rem;
        }
        
        .role-admin {
            background-color: #ffd8a8;
            color: #d9480f;
        }
        
        .role-ristoratore {
            background-color: #d3f9d8;
            color: #2b8a3e;
        }
        
        .role-lavoratore {
            background-color: #d0ebff;
            color: #1864ab;
        }
        
        .role-google {
            background-color: #e5dbff;
            color: #5f3dc4;
        }
        
        .error {
            color: #721c24;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .loading {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #666;
        }
        
        .loading:before {
            content: "";
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid #ff5722;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s infinite linear;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Filter form */
        .filter-form {
            margin: 1.5rem 0;
            padding: 1rem;
            background-color: #f5f5f5;
            border-radius: 6px;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-group input {
            width: 100%;
            padding: 0.7rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        /* Footer */
        footer {
            background-color: #222831;
            color: #fff;
            text-align: center;
            padding: 1rem 0;
            position: fixed;
            bottom: 0;
            width: 100%;
        }
        
        /* Stats */
        .stats-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }
        
        .stat-card {
            background-color: #fff;
            border-radius: 6px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            flex: 1;
            min-width: 160px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #ff5722;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            .btn-container {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
            }
        }
    </style>
</head>

<body>
    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="navbar-container">
            <a href="/dashboard" class="logo">
                <i class="fas fa-utensils"></i> RestMatch
            </a>
            <ul class="nav-links">
                <li><a href="/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="/chat"><i class="fas fa-comments"></i> Chat</a></li>
                <li><a href="/ajax" class="active"><i class="fas fa-filter"></i> Ricerca</a></li>
                <li><a href="/profile"><i class="fas fa-user"></i> Profilo</a></li>
            </ul>
            <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
        </div>
    </nav>

    <div class="container">
        <h1><i class="fas fa-users"></i> Gestione Utenti con AJAX</h1>
        <p class="description">
            Questa pagina consente di cercare e visualizzare gli utenti registrati utilizzando tecnologie AJAX.
            Le richieste vengono effettuate in background senza ricaricare la pagina per un'esperienza utente pi√π fluida.
        </p>
        
        <div class="card">
            <h2><i class="fas fa-search"></i> Ricerca Utenti</h2>
            <p>Visualizza tutti gli utenti o filtra per citt√†:</p>
            
            <div class="filter-form">
                <div class="form-group">
                    <label for="cityFilter"><i class="fas fa-city"></i> Filtra per citt√†:</label>
                    <input type="text" id="cityFilter" placeholder="Inserisci il nome di una citt√† (es. Milano, Roma, Bergamo, ecc.)">
                </div>
                <button id="btnFilterByCity" class="btn"><i class="fas fa-filter"></i> Filtra</button>
            </div>
            
            <div class="btn-container">
                <button id="btnGetAllUsers" class="btn">
                    <i class="fas fa-list-ul"></i> Mostra Tutti gli Utenti
                </button>
                <button id="btnGetBergamoUsers" class="btn">
                    <i class="fas fa-map-marker-alt"></i> Utenti di Bergamo
                </button>
            </div>
            
            <div id="results">
                <p><i class="fas fa-info-circle"></i> I risultati della ricerca appariranno qui. Seleziona una delle opzioni sopra per iniziare.</p>
            </div>
        </div>
    </div>

    <footer>
        <p>&copy; {{year}} RestMatch - Gestione Utenti</p>
    </footer>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Riferimenti agli elementi DOM
            const btnGetAllUsers = document.getElementById('btnGetAllUsers');
            const btnGetBergamoUsers = document.getElementById('btnGetBergamoUsers');
            const btnFilterByCity = document.getElementById('btnFilterByCity');
            const cityFilterInput = document.getElementById('cityFilter');
            const resultsDiv = document.getElementById('results');
            
            // Funzione per effettuare richieste AJAX
            function makeAjaxRequest(url, method, callback) {
                // Mostra stato di caricamento
                resultsDiv.innerHTML = '<p class="loading">Caricamento in corso...</p>';
                
                // Crea l'oggetto XMLHttpRequest
                const xhr = new XMLHttpRequest();
                
                // Configura la richiesta
                xhr.open(method, url, true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                
                // Gestione della risposta
                xhr.onload = function() {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try {
                            // Chiamata al callback con i dati ricevuti
                            const data = JSON.parse(xhr.responseText);
                            callback(null, data);
                        } catch (e) {
                            callback('Errore nel parsing della risposta: ' + e.message, null);
                        }
                    } else {
                        // Chiamata al callback con l'errore
                        callback('Errore nella richiesta: ' + xhr.status + ' ' + xhr.statusText, null);
                    }
                };
                
                // Gestione degli errori di rete
                xhr.onerror = function() {
                    callback('Errore di connessione di rete', null);
                };
                
                // Gestione del timeout
                xhr.ontimeout = function() {
                    callback('Timeout della richiesta', null);
                };
                
                // Invia la richiesta
                xhr.send();
            }
            
            // Funzione per visualizzare le statistiche degli utenti
            function displayUserStats(users) {
                if (!users || users.length === 0) return '';
                
                // Count users by role
                const roleCount = {};
                users.forEach(user => {
                    const role = user.ruolo || 'altro';
                    roleCount[role] = (roleCount[role] || 0) + 1;
                });
                
                let html = '<div class="stats-container">';
                html += `
                    <div class="stat-card">
                        <div class="stat-value">${users.length}</div>
                        <div class="stat-label">Utenti Totali</div>
                    </div>
                `;
                
                // Add statistics for each role
                for (const [role, count] of Object.entries(roleCount)) {
                    let roleLabel = role;
                    switch(role) {
                        case 'ristoratore': roleLabel = 'Ristoratori'; break;
                        case 'admin': roleLabel = 'Amministratori'; break;
                        case 'lavoratore': roleLabel = 'Lavoratori'; break;
                        case 'google': roleLabel = 'Utenti Google'; break;
                        default: roleLabel = 'Altri Utenti';
                    }
                    
                    html += `
                        <div class="stat-card">
                            <div class="stat-value">${count}</div>
                            <div class="stat-label">${roleLabel}</div>
                        </div>
                    `;
                }
                
                html += '</div>';
                return html;
            }
            
            // Funzione per visualizzare gli utenti
            function displayUsers(users) {
                if (!users || users.length === 0) {
                    resultsDiv.innerHTML = '<p class="error"><i class="fas fa-exclamation-circle"></i> Nessun utente trovato.</p>';
                    return;
                }
                
                let html = '<h2><i class="fas fa-users"></i> Elenco Utenti</h2>';
                
                // Aggiungi statistiche
                html += displayUserStats(users);
                
                html += `<p>Trovati ${users.length} utenti:</p>`;
                
                users.forEach(user => {
                    const userInitial = user.email ? user.email.charAt(0).toUpperCase() : '?';
                    const roleClass = `role-${user.ruolo || 'other'}`;
                    
                    html += `
                        <div class="user-item">
                            <div class="user-avatar">
                                ${userInitial}
                            </div>
                            <div class="user-info">
                                <p class="user-name">${user.email}</p>
                                <p class="user-meta">
                                    <i class="fas fa-map-marker-alt"></i> ${user.citta || 'Citt√† non specificata'}
                                    ${user.telefono ? `<span> | <i class="fas fa-phone"></i> ${user.telefono}</span>` : ''}
                                    ${user.data_nascita ? `<span> | <i class="fas fa-birthday-cake"></i> ${formatDate(user.data_nascita)}</span>` : ''}
                                </p>
                                <span class="user-role ${roleClass}">${formatRole(user.ruolo)}</span>
                            </div>
                        </div>
                    `;
                });
                
                resultsDiv.innerHTML = html;
            }
            
            // Funzione per formattare il ruolo
            function formatRole(role) {
                if (!role) return 'Ruolo non specificato';
                
                switch(role) {
                    case 'admin': return '<i class="fas fa-shield-alt"></i> Amministratore';
                    case 'ristoratore': return '<i class="fas fa-utensils"></i> Ristoratore';
                    case 'lavoratore': return '<i class="fas fa-briefcase"></i> Lavoratore';
                    case 'google': return '<i class="fab fa-google"></i> Utente Google';
                    default: return role;
                }
            }
            
            // Funzione per formattare le date
            function formatDate(dateString) {
                if (!dateString) return 'Data non specificata';
                
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;
                
                return date.toLocaleDateString('it-IT', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            }
            
            // Funzione per gestire gli errori
            function handleError(error) {
                resultsDiv.innerHTML = `
                    <div class="error">
                        <i class="fas fa-exclamation-triangle"></i> 
                        <span>Si √® verificato un errore: ${error}</span>
                    </div>
                    <p>Verifica la connessione o riprova pi√π tardi.</p>
                `;
            }
            
            // Gestione del click per tutti gli utenti
            btnGetAllUsers.addEventListener('click', function() {
                disableButtons(true);
                
                makeAjaxRequest('/api/users', 'GET', function(err, data) {
                    disableButtons(false);
                    
                    if (err) {
                        handleError(err);
                        return;
                    }
                    displayUsers(data);
                });
            });
            
            // Gestione del click per utenti filtrati per Bergamo
            btnGetBergamoUsers.addEventListener('click', function() {
                disableButtons(true);
                
                makeAjaxRequest('/api/users/filter?city=Bergamo', 'GET', function(err, data) {
                    disableButtons(false);
                    
                    if (err) {
                        handleError(err);
                        return;
                    }
                    
                    if (Array.isArray(data)) {
                        displayUsers(data);
                    } else if (data.error) {
                        handleError(data.error);
                    } else {
                        displayUsers([]); // Nessun risultato
                    }
                });
            });
            
            // Gestione del filtro per citt√†
            btnFilterByCity.addEventListener('click', function() {
                const cityValue = cityFilterInput.value.trim();
                if (!cityValue) {
                    alert('Inserisci una citt√† per filtrare gli utenti');
                    return;
                }
                
                disableButtons(true);
                
                makeAjaxRequest(`/api/users/filter?city=${encodeURIComponent(cityValue)}`, 'GET', function(err, data) {
                    disableButtons(false);
                    
                    if (err) {
                        handleError(err);
                        return;
                    }
                    
                    if (Array.isArray(data)) {
                        displayUsers(data);
                    } else if (data.error) {
                        handleError(data.error);
                    } else {
                        displayUsers([]); // Nessun risultato
                    }
                });
            });
            
            // Abilita Enter per filtrare
            cityFilterInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    btnFilterByCity.click();
                }
            });
            
            // Funzione per disabilitare/abilitare tutti i pulsanti durante le richieste
            function disableButtons(disabled) {
                btnGetAllUsers.disabled = disabled;
                btnGetBergamoUsers.disabled = disabled;
                btnFilterByCity.disabled = disabled;
                cityFilterInput.disabled = disabled;
            }
        });
    </script>
</body>
</html>