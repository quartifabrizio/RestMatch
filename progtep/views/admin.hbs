<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RestMatch â€¢ Pannello Admin</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Color System */
            --app-primary: #0071e3;
            --app-primary-dark: #0051a3;
            --app-primary-light: #5b9efa;
            --app-secondary: #f5f5f7;
            --app-text-primary: #1d1d1f;
            --app-text-secondary: #6e6e73;
            --app-success: #32d74b;
            --app-warning: #ff9f0a;
            --app-error: #ff3b30;
            --app-background: #ffffff;
            --app-card-bg: #ffffff;
            --app-divider: rgba(0, 0, 0, 0.05);
            --app-component-bg: rgba(0, 0, 0, 0.02);
            --app-overlay: rgba(0, 0, 0, 0.4);
            
            /* Shadow System */
            --shadow-sm: 0 2px 6px rgba(0, 0, 0, 0.08);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.05);
            --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.1);
            
            /* Border Radius */
            --radius-sm: 6px;
            --radius-md: 8px;
            --radius-lg: 12px;
            
            /* Transitions */
            --transition-fast: 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition-base: 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        [data-theme="dark"] {
            --app-primary: #0a84ff;
            --app-primary-dark: #409cff;
            --app-primary-light: #5b9efa;
            --app-secondary: #1c1c1e;
            --app-text-primary: #f5f5f7;
            --app-text-secondary: #98989d;
            --app-success: #32d74b;
            --app-warning: #ff9f0a;
            --app-error: #ff453a;
            --app-background: #000000;
            --app-card-bg: #1c1c1e;
            --app-divider: rgba(255, 255, 255, 0.1);
            --app-component-bg: rgba(255, 255, 255, 0.05);
            --app-overlay: rgba(0, 0, 0, 0.7);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        body {
            background-color: var(--app-background);
            color: var(--app-text-primary);
            line-height: 1.5;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            transition: background-color var(--transition-base), color var(--transition-base);
        }
        
        /* Navbar */
        .navbar {
            position: sticky;
            top: 0;
            z-index: 1000;
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            background-color: rgba(255, 255, 255, 0.85);
            border-bottom: 1px solid var(--app-divider);
            height: 70px;
            display: flex;
            align-items: center;
            padding: 0 1.5rem;
            transition: background-color var(--transition-base);
        }
        
        [data-theme="dark"] .navbar {
            background-color: rgba(29, 29, 31, 0.85);
        }
        
        .navbar-brand {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--app-primary);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .navbar-brand::before {
            content: '\f2e7';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            color: var(--app-primary);
        }
        
        .navbar-menu {
            display: flex;
            list-style: none;
            margin-left: auto;
        }
        
        .navbar-menu li {
            margin-left: 1.5rem;
        }
        
        .navbar-menu a {
            color: var(--app-text-primary);
            text-decoration: none;
            font-weight: 500;
            transition: color var(--transition-fast);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .navbar-menu a:hover {
            color: var(--app-primary);
        }
        
        /* Admin Container */
        .admin-container {
            max-width: 1400px;
            width: 100%;
            margin: 0 auto;
            padding: 2rem 1.5rem;
            flex: 1;
        }
        
        .admin-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 2rem;
        }
        
        .admin-header h1 {
            font-weight: 700;
            font-size: 2rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .admin-header h1::before {
            content: '\f085';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            color: var(--app-primary);
        }
        
        /* Stats Panel */
        .stats-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background-color: var(--app-card-bg);
            border-radius: var(--radius-md);
            padding: 1.5rem;
            box-shadow: var(--shadow-sm);
            text-align: center;
            transition: transform var(--transition-base), box-shadow var(--transition-base);
            border: 1px solid var(--app-divider);
        }
        
        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-md);
        }
        
        .stat-card h3 {
            font-size: 1rem;
            font-weight: 500;
            color: var(--app-text-secondary);
            margin-bottom: 0.75rem;
        }
        
        .stat-count {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--app-primary);
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--app-divider);
            margin-bottom: 1.5rem;
            overflow-x: auto;
        }
        
        .tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            font-weight: 500;
            color: var(--app-text-secondary);
            transition: all var(--transition-base);
            position: relative;
            white-space: nowrap;
        }
        
        .tab:hover {
            color: var(--app-primary);
        }
        
        .tab.active {
            color: var(--app-primary);
        }
        
        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: var(--app-primary);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Tables */
        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-sm);
            background-color: var(--app-card-bg);
            border-radius: var(--radius-md);
            overflow: hidden;
        }
        
        .users-table th,
        .users-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--app-divider);
        }
        
        .users-table th {
            font-weight: 600;
            background-color: var(--app-secondary);
            color: var(--app-text-primary);
        }
        
        .users-table tbody tr {
            transition: background-color var(--transition-fast);
        }
        
        .users-table tbody tr:hover {
            background-color: var(--app-component-bg);
        }
        
        .users-table tbody tr:last-child td {
            border-bottom: none;
        }
        
        .user-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Buttons */
        .btn-primary, .btn-secondary, .btn-delete, .btn-edit {
            cursor: pointer;
            font-weight: 500;
            border: none;
            padding: 0.6rem 1.2rem;
            border-radius: var(--radius-sm);
            transition: all var(--transition-base);
        }
        
        .btn-primary {
            background-color: var(--app-primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--app-primary-dark);
        }
        
        .btn-secondary {
            background-color: var(--app-secondary);
            color: var(--app-text-primary);
            border: 1px solid var(--app-divider);
        }
        
        .btn-secondary:hover {
            background-color: var(--app-divider);
        }
        
        .btn-edit {
            background-color: var(--app-warning);
            color: white;
        }
        
        .btn-edit:hover {
            background-color: #e68c09;
        }
        
        .btn-delete {
            background-color: var(--app-error);
            color: white;
        }
        
        .btn-delete:hover {
            background-color: #d92b21;
        }
        
        /* Form Controls */
        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--app-divider);
            border-radius: var(--radius-md);
            background-color: var(--app-component-bg);
            color: var(--app-text-primary);
            transition: all var(--transition-base);
            font-size: 0.9375rem;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--app-primary);
            box-shadow: 0 0 0 2px rgba(0, 113, 227, 0.2);
        }
        
        .form-group {
            margin-bottom: 1.25rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-text {
            font-size: 0.75rem;
            color: var(--app-text-secondary);
            margin-top: 0.25rem;
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: var(--app-overlay);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        
        .modal-content {
            background-color: var(--app-card-bg);
            margin: 10% auto;
            width: 90%;
            max-width: 500px;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            animation: scaleIn 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        
        @keyframes scaleIn {
            0% { transform: scale(0.95); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .modal-header h2 {
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--app-text-primary);
        }
        
        .close {
            color: var(--app-text-secondary);
            font-size: 1.75rem;
            font-weight: 300;
            cursor: pointer;
            transition: color var(--transition-fast);
        }
        
        .close:hover {
            color: var(--app-error);
        }
        
        /* Footer */
        .footer {
            background-color: var(--app-secondary);
            padding: 1.5rem;
            text-align: center;
            color: var(--app-text-secondary);
            font-size: 0.875rem;
            border-top: 1px solid var(--app-divider);
        }
        
        .footer .container {
            max-width: 1400px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-brand">RestMatch</div>
        <ul class="navbar-menu">
            <li><a href="/dashboard"><i class="fas fa-home"></i> Dashboard</a></li>
            <li><a href="/profile"><i class="fas fa-user"></i> Profilo</a></li>
            <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
    </nav>

    <div class="admin-container">
        <div class="admin-header">
            <h1>Pannello di Amministrazione</h1>
            <div>
                <button id="exportUsersBtn" class="btn-secondary" style="margin-right: 10px;">
                    <i class="fas fa-file-export"></i> Esporta CSV
                </button>
                <button id="addUserBtn" class="btn-primary">
                    <i class="fas fa-user-plus"></i> Aggiungi Utente
                </button>
            </div>
        </div>
        
        <div class="stats-panel">
            <div class="stat-card">
                <h3>Utenti Totali</h3>
                <div class="stat-count" id="totalUsers">{{users.length}}</div>
            </div>
            <div class="stat-card">
                <h3>Utenti Attivi</h3>
                <div class="stat-count" id="activeUsers">0</div>
            </div>
            <div class="stat-card">
                <h3>Utenti Google</h3>
                <div class="stat-count" id="googleUsers">0</div>
            </div>
        </div>
        
        <div class="tabs">
            <div class="tab active" data-tab="users"><i class="fas fa-users"></i> Gestione Utenti</div>
            <div class="tab" data-tab="preferences"><i class="fas fa-sliders"></i> Gestione Preferenze</div>
            <div class="tab" data-tab="logs"><i class="fas fa-history"></i> Log di Sistema</div>
        </div>
        
        <div class="tab-content active" id="users-tab">
            <input type="text" id="userSearchInput" placeholder="Cerca utente..." class="form-control" style="margin-bottom: 15px;">
            
            <table class="users-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Email</th>
                        <th>Telefono</th>
                        <th>Data di Nascita</th>
                        <th>CittÃ </th>
                        <th>Ruolo</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    {{#each users}}
                    <tr data-id="{{this.id}}">
                        <td>{{this.id}}</td>
                        <td>{{this.email}}</td>
                        <td>{{this.telefono}}</td>
                        <td>{{this.data_nascita}}</td>
                        <td>{{this.citta}}</td>
                        <td>{{this.ruolo}}</td>
                        <td class="user-actions">
                            <button class="btn-edit" onclick="editUser({{this.id}})"><i class="fas fa-edit"></i></button>
                            <button class="btn-delete" onclick="deleteUser({{this.id}}, '{{this.email}}')"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
        
        <div class="tab-content" id="preferences-tab">
            <h2>Preferenze Utenti</h2>
            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <select id="preferenceFilter" class="form-control" style="max-width: 200px;">
                    <option value="">Tutte le preferenze</option>
                    <option value="country">Filtra per regione</option>
                    <option value="job_type">Filtra per tipo di lavoro</option>
                </select>
                
                <div id="filterValueContainer" style="display: none; flex: 1;">
                    <div style="display: flex; gap: 10px;">
                        <input type="text" id="filterValue" placeholder="Valore filtro..." class="form-control">
                        <button id="applyFilterBtn" class="btn-primary">
                            <i class="fas fa-filter"></i> Applica Filtro
                        </button>
                    </div>
                </div>
            </div>
            
            <table class="users-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Utente ID</th>
                        <th>Email Utente</th>
                        <th>Regione</th>
                        <th>CittÃ </th>
                        <th>Data Inizio</th>
                        <th>Data Fine</th>
                        <th>Tipo Lavoro</th>
                        <th>Tipo Ristorante</th>
                    </tr>
                </thead>
                <tbody id="preferencesTableBody">
                    <!-- Populated via JavaScript -->
                    <tr>
                        <td colspan="9" style="text-align: center;">Caricamento preferenze...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="tab-content" id="logs-tab">
            <h2><i class="fas fa-history"></i> Log di Sistema</h2>
            <p>Gli ultimi 50 accessi al sistema:</p>
            
            <table class="users-table">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Utente</th>
                        <th>Azione</th>
                        <th>IP</th>
                    </tr>
                </thead>
                <tbody id="logsTableBody">
                    <tr>
                        <td colspan="4" style="text-align: center;">Caricamento log...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Modal per aggiungere/modificare un utente -->
    <div id="userModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Aggiungi Utente</h2>
                <span class="close">&times;</span>
            </div>
            <form id="userForm" style="padding: 1.5rem;">
                <input type="hidden" id="userId" value="">
                
                <div class="form-group">
                    <label for="userEmail">Email</label>
                    <input type="email" id="userEmail" required class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="userPhone">Telefono</label>
                    <input type="text" id="userPhone" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="userBirthdate">Data di Nascita</label>
                    <input type="date" id="userBirthdate" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="userCity">CittÃ </label>
                    <input type="text" id="userCity" class="form-control">
                </div>
                
                <div class="form-group">
                    <label for="userRole">Ruolo</label>
                    <select id="userRole" class="form-control">
                        <option value="lavoratore">Lavoratore</option>
                        <option value="ristoratore">Ristoratore</option>
                        <option value="admin">Admin</option>
                        <option value="google">Google</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="userPassword">Password</label>
                    <input type="password" id="userPassword" class="form-control">
                    <small class="form-text text-muted">Lascia vuoto per mantenere la password esistente durante la modifica.</small>
                </div>
                
                <button type="submit" class="btn-primary" style="width: 100%;">
                    <i class="fas fa-save"></i> Salva
                </button>
            </form>
        </div>
    </div>
    
    <script>
        // Calcola statistiche
        document.addEventListener('DOMContentLoaded', function() {
            updateUserStats();
            
            // Carica le preferenze
            loadPreferences();
            
            // Gestione tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Rimuovi active da tutti i tabs
                    tabs.forEach(t => t.classList.remove('active'));
                    // Aggiungi active al tab cliccato
                    this.classList.add('active');
                    
                    // Nascondi tutti i contenuti
                    const tabContents = document.querySelectorAll('.tab-content');
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Mostra il contenuto del tab selezionato
                    const tabId = this.getAttribute('data-tab') + '-tab';
                    document.getElementById(tabId).classList.add('active');
                    
                    // Se il tab Ã¨ "logs", carica i log di sistema
                    if (this.getAttribute('data-tab') === 'logs') {
                        loadSystemLogs();
                    }
                });
            });
            
            // Filter per preferenze
            document.getElementById('preferenceFilter').addEventListener('change', function() {
                const filterValueContainer = document.getElementById('filterValueContainer');
                if (this.value === '') {
                    filterValueContainer.style.display = 'none';
                    loadPreferences();
                } else {
                    filterValueContainer.style.display = 'block';
                }
            });
            
            document.getElementById('applyFilterBtn').addEventListener('click', function() {
                const filterType = document.getElementById('preferenceFilter').value;
                const filterValue = document.getElementById('filterValue').value;
                loadPreferences(filterType, filterValue);
            });
            
            // Filtro ricerca utenti
            document.getElementById('userSearchInput').addEventListener('keyup', function() {
                const searchText = this.value.toLowerCase();
                const rows = document.querySelectorAll('#usersTableBody tr');
                
                rows.forEach(row => {
                    let found = false;
                    const cells = row.querySelectorAll('td');
                    cells.forEach(cell => {
                        if (cell.textContent.toLowerCase().includes(searchText)) {
                            found = true;
                        }
                    });
                    
                    if (found) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            
            // Bottone per esportare utenti in CSV
            document.getElementById('exportUsersBtn').addEventListener('click', exportUsersToCSV);
        });
        
        // Funzione per aggiornare le statistiche degli utenti
        function updateUserStats() {
            // Conta utenti attivi (per semplicitÃ , tutti sono considerati attivi)
            document.getElementById('activeUsers').textContent = {{users.length}};
            
            // Conta utenti Google
            let googleUsers = 0;
            {{#each users}}
                if ("{{this.ruolo}}" === "google") {
                    googleUsers++;
                }
            {{/each}}
            document.getElementById('googleUsers').textContent = googleUsers;
        }
        
        // Funzione per caricare le preferenze degli utenti
        async function loadPreferences(filterType = '', filterValue = '') {
            try {
                // Mostra spinner o testo di caricamento
                document.getElementById('preferencesTableBody').innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center;">
                            <i class="fas fa-spinner fa-spin"></i> Caricamento preferenze...
                        </td>
                    </tr>
                `;
                
                // Prima ottieni tutte le preferenze dal database delle sessioni
                const response = await fetch('/api/preferences');
                if (!response.ok) {
                    throw new Error('Errore nel caricamento delle preferenze');
                }
                
                let preferences = await response.json();
                
                // Recupera informazioni aggiuntive sugli utenti
                const userResponse = await fetch('/api/users');
                if (!userResponse.ok) {
                    throw new Error('Errore nel caricamento degli utenti');
                }
                
                const users = await userResponse.json();
                
                // Abbina le preferenze con gli utenti
                preferences = preferences.map(pref => {
                    const user = users.find(u => u.id === pref.user_id);
                    return {
                        ...pref,
                        user_email: user ? user.email : 'N/A'
                    };
                });
                
                // Applica filtri se specificati
                if (filterType && filterValue) {
                    preferences = preferences.filter(pref => {
                        if (filterType === 'country' && pref.country) {
                            return pref.country.toLowerCase().includes(filterValue.toLowerCase());
                        } else if (filterType === 'job_type' && pref.job_type) {
                            // Verifica se il tipo di lavoro Ã¨ un array o una stringa
                            if (Array.isArray(pref.job_type)) {
                                return pref.job_type.some(jt => 
                                    jt.toLowerCase().includes(filterValue.toLowerCase())
                                );
                            } else {
                                return pref.job_type.toLowerCase().includes(filterValue.toLowerCase());
                            }
                        }
                        return true;
                    });
                }
                
                // Popola la tabella
                const tbody = document.getElementById('preferencesTableBody');
                tbody.innerHTML = '';
                
                if (preferences.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="9" style="text-align: center;">
                                Nessuna preferenza trovata
                            </td>
                        </tr>
                    `;
                    return;
                }
                
                preferences.forEach(pref => {
                    const row = document.createElement('tr');
                    
                    // Converti job_type ad una stringa per la visualizzazione
                    let jobTypeDisplay = pref.job_type;
                    if (Array.isArray(pref.job_type)) {
                        jobTypeDisplay = pref.job_type.join(', ');
                    }
                    
                    row.innerHTML = `
                        <td>${pref.id}</td>
                        <td>${pref.user_id}</td>
                        <td>${pref.user_email}</td>
                        <td>${pref.country || 'N/A'}</td>
                        <td>${pref.city || 'N/A'}</td>
                        <td>${pref.start_date || 'N/A'}</td>
                        <td>${pref.end_date || 'N/A'}</td>
                        <td>${jobTypeDisplay || 'N/A'}</td>
                        <td>${pref.restaurant_type || 'N/A'}</td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Errore:', error);
                document.getElementById('preferencesTableBody').innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center; color: var(--app-error);">
                            <i class="fas fa-exclamation-circle"></i> Errore nel caricamento delle preferenze
                        </td>
                    </tr>
                `;
            }
        }
        
        // Modal handling
        const modal = document.getElementById('userModal');
        const closeButton = document.querySelector('.close');
        const addUserBtn = document.getElementById('addUserBtn');
        
        addUserBtn.addEventListener('click', function() {
            document.getElementById('modalTitle').textContent = 'Aggiungi Utente';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            modal.style.display = 'block';
        });
        
        closeButton.addEventListener('click', function() {
            modal.style.display = 'none';
        });
        
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
        
        // Form submit
        document.getElementById('userForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const userId = document.getElementById('userId').value;
            const userData = {
                email: document.getElementById('userEmail').value,
                telefono: document.getElementById('userPhone').value || '',
                data_nascita: document.getElementById('userBirthdate').value || '',
                citta: document.getElementById('userCity').value || '',
                ruolo: document.getElementById('userRole').value,
                password: document.getElementById('userPassword').value || ''
            };
            
            try {
                let response;
                
                if (userId) {
                    // Update existing user
                    response = await fetch('/registra', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            ...userData,
                            id: userId,
                            update: true
                        })
                    });
                } else {
                    // Create new user
                    response = await fetch('/registra', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(userData)
                    });
                }
                
                if (response.ok) {
                    showNotification('Operazione completata con successo', 'success');
                    modal.style.display = 'none';
                    // Reload page to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    const error = await response.text();
                    showNotification('Errore: ' + error, 'error');
                }
            } catch (error) {
                console.error('Errore:', error);
                showNotification('Si Ã¨ verificato un errore durante l\'operazione', 'error');
            }
        });
        
        // Edit user
        function editUser(id) {
            const row = document.querySelector(`tr[data-id="${id}"]`);
            if (!row) return;
            
            const cells = row.querySelectorAll('td');
            
            document.getElementById('userId').value = id;
            document.getElementById('userEmail').value = cells[1].textContent;
            document.getElementById('userPhone').value = cells[2].textContent;
            document.getElementById('userBirthdate').value = cells[3].textContent;
            document.getElementById('userCity').value = cells[4].textContent;
            document.getElementById('userRole').value = cells[5].textContent;
            document.getElementById('userPassword').value = '';
            
            document.getElementById('modalTitle').textContent = 'Modifica Utente';
            modal.style.display = 'block';
        }
        
        // Delete user
        async function deleteUser(id, email) {
            // Don't delete admin users
            if (email.endsWith('@admin.it')) {
                showNotification('Non Ã¨ possibile eliminare un account amministratore', 'error');
                return;
            }
            
            if (confirm(`Sei sicuro di voler eliminare l'utente con ID ${id} (${email})?`)) {
                try {
                    // Simuliamo la cancellazione lato client
                    document.querySelector(`tr[data-id="${id}"]`).style.display = 'none';
                    showNotification('Utente eliminato con successo', 'success');
                    
                    // Update stats
                    updateUserStats();
                } catch (error) {
                    console.error('Errore:', error);
                    showNotification('Si Ã¨ verificato un errore durante l\'eliminazione dell\'utente', 'error');
                }
            }
        }
        
        // Funzione per esportare i dati degli utenti in CSV
        function exportUsersToCSV() {
            const table = document.querySelector('.users-table');
            const rows = table.querySelectorAll('tr');
            let csvContent = 'data:text/csv;charset=utf-8,';
            
            // Header
            const headers = Array.from(rows[0].querySelectorAll('th'));
            // Exclude "Azioni" column
            const headerRow = headers.slice(0, -1).map(header => `"${header.textContent}"`).join(',');
            csvContent += headerRow + '\r\n';
            
            // Data rows
            for (let i = 1; i < rows.length; i++) {
                const cells = rows[i].querySelectorAll('td');
                // Exclude "Azioni" column
                const dataRow = Array.from(cells).slice(0, -1).map(cell => `"${cell.textContent}"`).join(',');
                csvContent += dataRow + '\r\n';
            }
            
            // Create download link
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'utenti_restmatch_' + getCurrentDate() + '.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showNotification('Esportazione completata con successo', 'success');
        }
        
        // Funzione per caricare i log di sistema (simulati per ora)
        function loadSystemLogs() {
            const logsTableBody = document.getElementById('logsTableBody');
            logsTableBody.innerHTML = `
                <tr>
                    <td colspan="4" style="text-align: center;">
                        <i class="fas fa-spinner fa-spin"></i> Caricamento log...
                    </td>
                </tr>
            `;
            
            // Simuliamo un ritardo di caricamento
            setTimeout(() => {
                // Dati di esempio per i log
                const currentDate = "2025-05-08 10:36:53"; // Data da display
                const yesterday = new Date("2025-05-08");
                yesterday.setDate(yesterday.getDate() - 1);
                const formattedYesterday = formatDate(yesterday);
                
                const sampleLogs = [
                    { timestamp: currentDate, user: 'admin@admin.it', action: 'Login', ip: '192.168.1.1' },
                    { timestamp: currentDate.replace("10:36", "10:20"), user: 'quartifabrizio', action: 'Accesso a dashboard', ip: '192.168.1.1' },
                    { timestamp: currentDate.replace("10:36", "09:45"), user: 'user@example.com', action: 'Aggiornamento profilo', ip: '192.168.1.2' },
                    { timestamp: formattedYesterday + " 18:30:45", user: 'google_user@gmail.com', action: 'Login con Google', ip: '192.168.1.3' },
                    { timestamp: formattedYesterday + " 16:12:33", user: 'admin@admin.it', action: 'Eliminazione utente', ip: '192.168.1.1' }
                ];
                
                logsTableBody.innerHTML = '';
                
                sampleLogs.forEach(log => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${log.timestamp}</td>
                        <td>${log.user}</td>
                        <td>${log.action}</td>
                        <td>${log.ip}</td>
                    `;
                    logsTableBody.appendChild(row);
                });
            }, 800);
        }
        
        // Funzione per formattare la data nel formato YYYY-MM-DD HH:MM:SS
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');
            
            return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
        }
        
        // Funzione per ottenere la data corrente nel formato YYYY-MM-DD
        function getCurrentDate() {
            const now = new Date("2025-05-08");
            return now.getFullYear() + '-' + 
                   String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                   String(now.getDate()).padStart(2, '0');
        }
        
        // Funzione per mostrare notifiche
        function showNotification(message, type) {
            // Create or get the notification element
            let notification = document.getElementById('notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'notification';
                notification.style.position = 'fixed';
                notification.style.bottom = '20px';
                notification.style.right = '20px';
                notification.style.padding = '12px 20px';
                notification.style.borderRadius = '4px';
                notification.style.zIndex = '9999';
                notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                notification.style.display = 'flex';
                notification.style.alignItems = 'center';
                notification.style.gap = '10px';
                notification.style.maxWidth = '350px';
                notification.style.transition = 'all 0.3s ease';
                document.body.appendChild(notification);
            }
            
            // Set type-specific styles
            if (type === 'success') {
                notification.style.background = 'var(--app-success)';
                notification.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
            } else if (type === 'error') {
                notification.style.background = 'var(--app-error)';
                notification.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
            } else {
                notification.style.background = 'var(--app-primary)';
                notification.innerHTML = `<i class="fas fa-info-circle"></i> ${message}`;
            }
            
            notification.style.color = 'white';
            notification.style.opacity = '1';
            notification.style.transform = 'translateY(0)';
            
            // Auto hide after 4 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateY(20px)';
            }, 4000);
        }
    </script>
    
    <footer class="footer">
        <div class="container">
            <p>&copy; {{year}} RestMatch - Pannello Amministratore</p>
            <p><small>Versione 1.0.3 - Ultimo aggiornamento: {{#formatDate}}2025-05-08{{/formatDate}}</small></p>
        </div>
    </footer>
    
</body>
</html>