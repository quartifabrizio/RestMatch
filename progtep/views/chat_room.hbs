<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{room.name}} - Chat</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<style>
    /* Main Colors and Variables */
:root {
  --primary-color: #ff8a00;
  --primary-dark: #e67e00;
  --text-color: #333333;
  --bg-color: #f5f7fa;
  --secondary-bg: #ffffff;
  --navbar-bg: #222831;
  --border-color: #e0e0e0;
  --success-color: #4CAF50;
  --danger-color: #f44336;
}

/* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}

body {
  background-color: var(--bg-color);
  color: var(--text-color);
  line-height: 1.6;
}

/* Navbar styles */
.navbar {
  background-color: var(--navbar-bg);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 100;
}

.navbar-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.8rem 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.logo {
  color: #fff;
  font-size: 1.5rem;
  font-weight: 700;
  text-decoration: none;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logo i {
  color: var(--primary-color);
}

.nav-links {
  display: flex;
  list-style: none;
  gap: 1.5rem;
}

.nav-links li a {
  color: #ddd;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s;
  display: flex;
  align-items: center;
  gap: 0.4rem;
}

.nav-links li a:hover, .nav-links li a.active {
  color: var(--primary-color);
}

.logout-btn {
  background-color: transparent;
  color: #ddd;
  border: 1px solid var(--primary-color);
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s;
  display: flex;
  align-items: center;
  gap: 0.4rem;
}

.logout-btn:hover {
  background-color: var(--primary-color);
  color: #fff;
}

.mobile-toggle {
  display: none;
  background: none;
  border: none;
  color: #fff;
  font-size: 1.5rem;
  cursor: pointer;
}

/* Container */
.container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Layout */
.row {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
}

.col-md-3 {
  flex: 0 0 calc(25% - 30px);
  max-width: calc(25% - 30px);
}

.col-md-9 {
  flex: 0 0 calc(75% - 30px);
  max-width: calc(75% - 30px);
}

/* Typography */
h1, h2, h3, h4 {
  color: #333;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
}

h1 i, h2 i, h3 i, h4 i {
  color: var(--primary-color);
}

/* Forms */
.form-group {
  position: relative;
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.form-control {
  width: 100%;
  padding: 0.8rem 1rem;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--secondary-bg);
  transition: border-color 0.3s;
  font-size: 1rem;
}

.form-group i {
  position: absolute;
  left: 1rem;
  top: 2.3rem;
  color: #aaa;
}

.form-control:focus {
  border-color: var(--primary-color);
  outline: none;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s;
  text-decoration: none;
  font-size: 1rem;
}

.btn-primary {
  background-color: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-dark);
}

.btn-secondary {
  background-color: #555;
  color: white;
}

.btn-secondary:hover {
  background-color: #444;
}

/* Lists */
#rooms-list, #participants-list {
  list-style-type: none;
  margin-bottom: 30px;
  background-color: var(--secondary-bg);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

#rooms-list li, #participants-list li {
  padding: 12px 15px;
  border-bottom: 1px solid var(--border-color);
  position: relative;
  display: flex;
  align-items: center;
}

#rooms-list li:last-child, #participants-list li:last-child {
  border-bottom: none;
}

#rooms-list a {
  display: block;
  color: var(--text-color);
  text-decoration: none;
  transition: color 0.3s;
  width: 100%;
}

#rooms-list a:hover {
  color: var(--primary-color);
}

.badge {
  background-color: var(--primary-color);
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 12px;
  margin-left: auto;
}

/* Status Indicators */
.status-badge {
  padding: 3px 8px;
  border-radius: 20px;
  font-size: 12px;
  margin-left: 8px;
  display: inline-flex;
  align-items: center;
  gap: 0.3rem;
}

.online {
  background-color: var(--success-color);
  color: white;
}

.offline {
  background-color: #ccc;
  color: #666;
}

/* Online users counter */
.online-users {
  background-color: var(--success-color);
  color: white;
  padding: 0.4rem 0.8rem;
  border-radius: 20px;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  gap: 0.3rem;
  margin-left: 1rem;
}

/* Chat Container */
#chat-container {
  background-color: var(--secondary-bg);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  height: calc(100vh - 180px);
  display: flex;
  flex-direction: column;
}

#chat-container h3 {
  padding: 15px;
  background-color: var(--navbar-bg);
  color: white;
  margin-bottom: 0;
  border-bottom: 2px solid var(--primary-color);
}

/* Messages */
#messages-container {
  flex: 1;
  overflow-y: auto;
  padding: 15px;
  background-color: var(--bg-color);
}

.message {
  margin-bottom: 15px;
  max-width: 75%;
  clear: both;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  padding: 12px 15px;
}

.message-self {
  float: right;
  background-color: var(--primary-color);
  color: white;
  border-radius: 15px 15px 0 15px;
}

.message-other {
  float: left;
  background-color: var(--secondary-bg);
  border-radius: 15px 15px 15px 0;
}

.message-header {
  padding: 0 0 8px;
  font-size: 13px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 5px;
}

.message-self .message-header {
  color: rgba(255,255,255,0.9);
}

.message-other .message-header {
  color: #666;
}

.message-content {
  word-wrap: break-word;
  line-height: 1.5;
}

#typing-indicator {
  padding: 8px 15px;
  color: #777;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 8px;
}

/* Message Form */
#message-form {
  background-color: var(--secondary-bg);
  padding: 15px;
  border-top: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  gap: 10px;
}

#message-input {
  flex: 1;
  resize: none;
  max-height: 100px;
  padding: 12px 15px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  transition: border-color 0.3s;
  font-size: 15px;
}

#message-input:focus {
  border-color: var(--primary-color);
  outline: none;
}

/* Footer */
footer {
  text-align: center;
  padding: 20px 0;
  margin-top: 30px;
  color: #777;
  font-size: 14px;
}

/* Alert styles */
.alert {
  padding: 1rem;
  border-radius: 4px;
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

/* Checkbox Styling */
.checkbox {
  display: block;
  margin-bottom: 12px;
}

.checkbox label {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-weight: normal;
  gap: 8px;
}

.checkbox input[type="checkbox"] {
  accent-color: var(--primary-color);
}

/* Icons using Font Awesome */
.icon-prefix::before {
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 8px;
}

/* Apply icons to elements */
#rooms-list li a::before {
  content: "\f086";
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 8px;
  color: var(--primary-color);
}

#participants-list li::before {
  content: "\f007";
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 8px;
  color: #666;
}

h3::before {
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 10px;
}

#chat-container h3::before {
  content: "\f4ad";
  color: var(--primary-color);
}

#messages-container h3::before {
  content: "\f0e6";
}

#participants-list + h3::before {
  content: "\f500";
}

.btn-primary::before {
  content: "\f1d8";
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 5px;
}

.btn-secondary::before {
  content: "\f053";
  font-family: "Font Awesome 6 Free";
  font-weight: 900;
  margin-right: 5px;
}

/* Responsive Styles */
@media (max-width: 900px) {
  .row {
    flex-direction: column;
    gap: 20px;
  }
  
  .col-md-3, .col-md-9 {
    flex: 0 0 100%;
    max-width: 100%;
  }
}

@media (max-width: 768px) {
  .mobile-toggle {
    display: block;
  }
  
  .nav-links {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: var(--navbar-bg);
    flex-direction: column;
    padding: 1rem;
  }
  
  .nav-links.active {
    display: flex;
  }
  
  .message {
    max-width: 85%;
  }
  
  .navbar-container {
    padding: 0.8rem 1rem;
  }
}
</style>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <h3>Partecipanti</h3>
                <ul id="participants-list">
                    {{#each participants}}
                    <li data-user-id="{{id}}">
                        {{email}} <span class="status-badge offline">Offline</span>
                    </li>
                    {{/each}}
                </ul>
                
                <a href="/chat" class="btn btn-secondary">Torna alla lista chat</a>
            </div>
            
            <div class="col-md-9">
                <div id="chat-container">
                    <h3>{{room.name}}</h3>
                    <div id="messages-container">
                        {{#each messages}}
                        <div class="message {{#if isSelf}}message-self{{else}}message-other{{/if}}">
                            <div class="message-header">
                                <span class="message-sender">{{sender}}</span>
                                <span class="message-time">{{timestamp}}</span>
                            </div>
                            <div class="message-content">{{content}}</div>
                        </div>
                        {{/each}}
                    </div>
                    
                    <div id="typing-indicator" style="display: none;">
                        <em>Qualcuno sta scrivendo...</em>
                    </div>
                    
                    <form id="message-form">
                        <div class="form-group">
                            <textarea id="message-input" class="form-control" placeholder="Scrivi un messaggio..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Invia</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Connessione WebSocket
            const socket = io();
            
            // Riferimenti DOM
            const messagesContainer = document.getElementById('messages-container');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const typingIndicator = document.getElementById('typing-indicator');
            
            // ID della room corrente
            const roomId = "{{roomId}}";
            
            // Autenticazione socket
            socket.emit('authenticate', {
                userId: {{user.id}}
            });
            
            // Unisciti alla room corrente
            socket.emit('join room', roomId);
            
            // Scroll dei messaggi in fondo
            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Scroll iniziale
            scrollToBottom();
            
            // Aggiunta di un nuovo messaggio
            function addMessage(message) {
                const messageDiv = document.createElement('div');
                const isSelf = parseInt(message.senderId) === {{user.id}};
                messageDiv.className = `message ${isSelf ? 'message-self' : 'message-other'}`;
                
                const messageHeader = document.createElement('div');
                messageHeader.className = 'message-header';
                
                const senderSpan = document.createElement('span');
                senderSpan.className = 'message-sender';
                senderSpan.textContent = message.sender;
                
                const timeSpan = document.createElement('span');
                timeSpan.className = 'message-time';
                timeSpan.textContent = message.timestamp;
                
                const messageContent = document.createElement('div');
                messageContent.className = 'message-content';
                messageContent.textContent = message.content;
                
                messageHeader.appendChild(senderSpan);
                messageHeader.appendChild(timeSpan);
                
                messageDiv.appendChild(messageHeader);
                messageDiv.appendChild(messageContent);
                
                messagesContainer.appendChild(messageDiv);
                scrollToBottom();
            }
            
            // Gestione invio messaggi
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const message = messageInput.value.trim();
                if (!message) return;
                
                // Invio al server
                fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        roomId: roomId,
                        message: message
                    })
                })
                .catch(error => {
                    console.error('Errore:', error);
                    alert('Si è verificato un errore durante l\'invio del messaggio');
                });
                
                // Pulisci l'input
                messageInput.value = '';
                
                // Disattiva l'indicatore di digitazione
                typingTimeout = null;
                socket.emit('typing', { roomId: roomId, isTyping: false });
            });
            
            // Gestione indicatore di digitazione
            let typingTimeout = null;
            messageInput.addEventListener('input', function() {
                // Cancella il timeout precedente
                if (typingTimeout) {
                    clearTimeout(typingTimeout);
                } else {
                    // Se non c'era un timeout, comunica che l'utente sta digitando
                    socket.emit('typing', { roomId: roomId, isTyping: true });
                }
                
                // Imposta un nuovo timeout
                typingTimeout = setTimeout(function() {
                    socket.emit('typing', { roomId: roomId, isTyping: false });
                    typingTimeout = null;
                }, 1000);
            });
            
            // Ricezione messaggi
            socket.on('chat message', function(message) {
                if (message.roomId === roomId) {
                    addMessage(message);
                }
            });
            
            // Indicatore di digitazione
            socket.on('user typing', function(data) {
                if (data.roomId === roomId && data.userId !== {{user.id}}) {
                    if (data.isTyping) {
                        typingIndicator.style.display = 'block';
                    } else {
                        typingIndicator.style.display = 'none';
                    }
                }
            });
            
            // Gestione stato utenti online/offline
            socket.on('user status', function(data) {
                const userElements = document.querySelectorAll(`[data-user-id="${data.userId}"]`);
                userElements.forEach(el => {
                    const statusBadge = el.querySelector('.status-badge');
                    if (statusBadge) {
                        if (data.status === 'online') {
                            statusBadge.textContent = 'Online';
                            statusBadge.classList.add('online');
                            statusBadge.classList.remove('offline');
                        } else {
                            statusBadge.textContent = 'Offline';
                            statusBadge.classList.add('offline');
                            statusBadge.classList.remove('online');
                        }
                    }
                });
            });
            
            // Pulizia alla chiusura
            window.addEventListener('beforeunload', function() {
                socket.emit('leave room', roomId);
            });
        });
    </script>

    <footer>
        <p>&copy; {{year}} Piattaforma di Lavoro. Tutti i diritti riservati.</p>
    </footer>
</body>
</html>