<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RestMatch • {{room.name}}</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            /* Color System */
            --app-primary: #0071e3;
            --app-primary-dark: #0051a3;
            --app-primary-light: #5b9efa;
            --app-secondary: #f5f5f7;
            --app-text-primary: #1d1d1f;
            --app-text-secondary: #6e6e73;
            --app-success: #32d74b;
            --app-warning: #ff9f0a;
            --app-error: #ff3b30;
            --app-background: #ffffff;
            --app-card-bg: #ffffff;
            --app-divider: rgba(0, 0, 0, 0.05);
            --app-component-bg: rgba(0, 0, 0, 0.02);
            --app-overlay: rgba(0, 0, 0, 0.4);
            --app-accent: #06c;
            --app-accent-hover: #007aff;
            --app-sidebar: #f5f5f7;
            --app-message-sent: #0071e3;
            --app-message-received: #f2f2f7;
            --app-timestamp: rgba(60, 60, 67, 0.5);
            --app-tooltip: rgba(0, 0, 0, 0.75);
            
            /* Shadow System */
            --shadow-sm: 0 2px 6px rgba(0, 0, 0, 0.08);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.05);
            --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 50px rgba(0, 0, 0, 0.12);
            
            /* Transitions */
            --transition-fast: 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition-base: 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition-slow: 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            --transition-bounce: 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            
            /* Borders */
            --radius-sm: 8px;
            --radius-md: 12px;
            --radius-lg: 20px;
            --radius-xl: 28px;
            --radius-full: 9999px;
        }
        
        [data-theme="dark"] {
            --app-primary: #0a84ff;
            --app-primary-dark: #409cff;
            --app-primary-light: #5b9efa;
            --app-secondary: #1c1c1e;
            --app-text-primary: #f5f5f7;
            --app-text-secondary: #98989d;
            --app-success: #32d74b;
            --app-warning: #ff9f0a;
            --app-error: #ff453a;
            --app-background: #000000;
            --app-card-bg: #1c1c1e;
            --app-divider: rgba(255, 255, 255, 0.1);
            --app-component-bg: rgba(255, 255, 255, 0.05);
            --app-overlay: rgba(0, 0, 0, 0.7);
            --app-accent: #0a84ff;
            --app-accent-hover: #409cff;
            --app-sidebar: #1c1c1e;
            --app-message-sent: #0a84ff;
            --app-message-received: #2c2c2e;
            --app-timestamp: rgba(235, 235, 245, 0.5);
            --app-tooltip: rgba(30, 30, 30, 0.85);
        }
        
        /* Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        body {
            background-color: var(--app-background);
            color: var(--app-text-primary);
            line-height: 1.5;
            font-size: 16px;
            overflow-x: hidden;
            transition: background-color var(--transition-base), color var(--transition-base);
        }
        
        /* Hide scrollbar but maintain functionality */
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
            background: transparent;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 6px;
        }
        
        [data-theme="dark"] ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(0, 0, 0, 0.2);
        }
        
        [data-theme="dark"] ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        /* Layout */
        .app-container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            overflow: hidden;
        }
        
        .content-wrapper {
            display: flex;
            flex: 1;
            height: calc(100vh - 70px);
            overflow: hidden;
        }
        
        /* Navbar */
        .navbar {
            position: sticky;
            top: 0;
            z-index: 1000;
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            background-color: rgba(255, 255, 255, 0.85);
            border-bottom: 1px solid var(--app-divider);
            height: 70px;
            display: flex;
            align-items: center;
            transition: background-color var(--transition-base);
        }
        
        [data-theme="dark"] .navbar {
            background-color: rgba(29, 29, 31, 0.85);
        }
        
        .navbar-container {
            max-width: 1400px;
            width: 100%;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            color: var(--app-text-primary);
            font-weight: 600;
            font-size: 1.25rem;
            transition: transform var(--transition-bounce);
        }
        
        .logo:hover {
            transform: scale(1.05);
        }
        
        .logo i {
            color: var(--app-primary);
            font-size: 1.5rem;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 0.5rem;
        }
        
        .nav-links li a {
            text-decoration: none;
            color: var(--app-text-primary);
            font-weight: 500;
            padding: 0.5rem 0.8rem;
            border-radius: var(--radius-md);
            transition: color var(--transition-base), background-color var(--transition-base), transform var(--transition-base);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .nav-links li a:hover {
            background-color: var(--app-component-bg);
            transform: translateY(-2px);
        }
        
        .nav-links li a.active {
            color: var(--app-primary);
            background-color: var(--app-component-bg);
        }
        
        /* Mobile toggle */
        .mobile-toggle {
            display: none;
            background: transparent;
            border: none;
            color: var(--app-text-primary);
            font-size: 1.25rem;
            cursor: pointer;
            padding: 0.5rem;
            transition: color var(--transition-fast);
        }
        
        .mobile-toggle:hover {
            color: var(--app-primary);
        }
        
        /* Online Indicator */
        .online-indicator {
            background: linear-gradient(135deg, #34c759, var(--app-success));
            color: white;
            padding: 0.4rem 0.8rem;
            border-radius: var(--radius-full);
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.4rem;
            box-shadow: var(--shadow-sm);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(50, 215, 75, 0.6); }
            70% { box-shadow: 0 0 0 6px rgba(50, 215, 75, 0); }
            100% { box-shadow: 0 0 0 0 rgba(50, 215, 75, 0); }
        }
        
        .online-indicator i {
            font-size: 0.625rem;
        }
        
        /* Sidebar */
        .sidebar {
            width: 75px;
            flex-shrink: 0;
            background-color: var(--app-sidebar);
            border-right: 1px solid var(--app-divider);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 2rem 0;
            transition: width var(--transition-slow), background-color var(--transition-base);
            overflow: hidden;
            position: relative;
            z-index: 10;
        }
        
        .sidebar:hover {
            width: 220px;
        }
        
        .sidebar-nav {
            display: flex;
            flex-direction: column;
            width: 100%;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .sidebar-nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.2rem;
            border-radius: var(--radius-md);
            color: var(--app-text-primary);
            text-decoration: none;
            margin: 0 0.5rem;
            transition: all var(--transition-base);
            white-space: nowrap;
            overflow: hidden;
        }
        
        .sidebar-nav-item:hover {
            background-color: var(--app-component-bg);
            transform: translateX(4px);
        }
        
        .sidebar-nav-item.active {
            background-color: var(--app-primary);
            color: white;
        }
        
        .sidebar-nav-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 1rem;
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-dark));
            color: white;
            flex-shrink: 0;
            font-size: 1rem;
            transition: transform var(--transition-bounce), background var(--transition-base);
        }
        
        .sidebar-nav-item:hover .sidebar-nav-icon {
            transform: scale(1.1) rotate(-10deg);
        }
        
        .sidebar-nav-item.active .sidebar-nav-icon {
            background: white;
            color: var(--app-primary);
        }
        
        .sidebar-nav-text {
            font-weight: 500;
            opacity: 0;
            transition: opacity var(--transition-base);
        }
        
        .sidebar:hover .sidebar-nav-text {
            opacity: 1;
        }
        
        /* Theme Toggle */
        .theme-toggle {
            position: relative;
            width: 55px;
            height: 28px;
            border-radius: 14px;
            background-color: var(--app-component-bg);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 6px;
            transition: background-color var(--transition-base);
            border: 1px solid var(--app-divider);
            margin-left: 1rem;
        }
        
        .theme-toggle i {
            font-size: 14px;
            color: var(--app-text-secondary);
            z-index: 1;
        }
        
        .theme-toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: var(--app-primary);
            transition: transform var(--transition-base), background-color var(--transition-base);
            box-shadow: var(--shadow-sm);
        }
        
        [data-theme="dark"] .theme-toggle-slider {
            transform: translateX(27px);
        }
        
        /* Chat Layout */
        .chat-container {
            flex: 1;
            display: flex;
            height: 100%;
        }
        
        /* Participants Sidebar */
        .participants-sidebar {
            width: 280px;
            flex-shrink: 0;
            border-right: 1px solid var(--app-divider);
            display: flex;
            flex-direction: column;
            height: 100%;
            background-color: var(--app-card-bg);
            position: relative;
            z-index: 9;
        }
        
        .participants-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .participants-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--app-text-primary);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .participants-title i {
            color: var(--app-primary);
        }
        
        .participants-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .participant-action {
            background-color: transparent;
            border: none;
            color: var(--app-text-secondary);
            font-size: 1.25rem;
            cursor: pointer;
            transition: all var(--transition-base);
            padding: 0.5rem;
            position: relative;
        }
        
        .participant-action:hover {
            color: var(--app-primary);
            transform: translateY(-2px);
        }
        
        .participants-list {
            list-style: none;
            padding: 0.5rem 0;
            overflow-y: auto;
            flex: 1;
        }
        
        .participant-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: background-color var(--transition-fast);
            cursor: pointer;
            border-radius: var(--radius-md);
            margin: 0 0.25rem 0.25rem;
        }
        
        .participant-item:hover {
            background-color: var(--app-component-bg);
        }
        
        .participant-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .participant-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-light));
            color: white;
            font-size: 1rem;
            font-weight: 600;
            position: relative;
        }
        
        .avatar-status {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: var(--app-text-secondary);
            border: 2px solid var(--app-card-bg);
        }
        
        .avatar-status.online {
            background-color: var(--app-success);
        }
        
        .participant-details {
            overflow: hidden;
        }
        
        .participant-name {
            font-size: 0.9375rem;
            color: var(--app-text-primary);
            font-weight: 500;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .participant-role {
            font-size: 0.75rem;
            color: var(--app-text-secondary);
        }
        
        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: var(--radius-full);
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }
        
        .online {
            background-color: rgba(50, 215, 75, 0.15);
            color: var(--app-success);
        }
        
        .online::before {
            content: '';
            display: block;
            width: 6px;
            height: 6px;
            background-color: var(--app-success);
            border-radius: 50%;
        }
        
        .offline {
            background-color: rgba(142, 142, 147, 0.15);
            color: var(--app-text-secondary);
        }
        
        .offline::before {
            content: '';
            display: block;
            width: 6px;
            height: 6px;
            background-color: var(--app-text-secondary);
            border-radius: 50%;
        }
        
        .participants-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--app-divider);
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border-radius: var(--radius-md);
            font-weight: 500;
            cursor: pointer;
            transition: all var(--transition-base);
            border: none;
            gap: 0.5rem;
            font-size: 0.9375rem;
            text-decoration: none;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-dark));
            color: white;
            box-shadow: 0 2px 8px rgba(0, 113, 227, 0.4);
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 113, 227, 0.6);
        }
        
        .btn-secondary {
            background-color: var(--app-component-bg);
            color: var(--app-text-primary);
        }
        
        .btn-secondary:hover {
            background-color: rgba(0, 0, 0, 0.05);
            transform: translateY(-2px);
        }
        
        [data-theme="dark"] .btn-secondary:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .btn-block {
            width: 100%;
            justify-content: center;
        }
        
        .btn-icon-only {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--radius-full);
        }
        
        /* Chat Main Area */
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: 100%;
            position: relative;
            overflow: hidden;
        }
        
        .chat-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: var(--app-card-bg);
        }
        
        .room-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .room-avatar {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-dark));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.125rem;
            flex-shrink: 0;
        }
        
        .room-details {
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .room-name {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--app-text-primary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .room-participants {
            font-size: 0.875rem;
            color: var(--app-text-secondary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .room-actions {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .room-action {
            background: none;
            border: none;
            color: var(--app-text-secondary);
            font-size: 1.125rem;
            cursor: pointer;
            transition: all var(--transition-base);
            padding: 0.5rem;
            border-radius: var(--radius-md);
            position: relative;
        }
        
        .room-action:hover {
            color: var(--app-primary);
            background-color: var(--app-component-bg);
            transform: translateY(-2px);
        }
        
        .room-action[data-tooltip]:before {
            content: attr(data-tooltip);
            position: absolute;
            top: -35px;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.5rem 0.75rem;
            border-radius: var(--radius-md);
            background-color: var(--app-tooltip);
            color: white;
            font-size: 0.75rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all var(--transition-fast);
            pointer-events: none;
            box-shadow: var(--shadow-md);
            font-weight: 500;
        }
        
        .room-action:hover[data-tooltip]:before {
            opacity: 1;
            visibility: visible;
            top: -40px;
        }
        
        /* Messages Area */
        .messages-container {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
            background-color: var(--app-background);
            scroll-behavior: smooth;
        }
        
        .date-divider {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 1.5rem 0;
        }
        
        .date-divider-line {
            flex: 1;
            height: 1px;
            background-color: var(--app-divider);
        }
        
        .date-divider-text {
            padding: 0 1rem;
            font-size: 0.75rem;
            color: var(--app-text-secondary);
            background-color: var(--app-background);
        }
        
        .message-group {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            animation: fadeInMessage 0.3s ease-out;
        }
        
        .message-group-self {
            align-self: flex-end;
        }
        
        .message-group-other {
            align-self: flex-start;
        }
        
        @keyframes fadeInMessage {
            from { 
                opacity: 0;
                transform: translateY(10px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .message-sender-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.25rem;
        }
        
        .message-sender-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-light));
            color: white;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .message-sender-name {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--app-text-secondary);
        }
        
        .message {
            padding: 0.75rem 1rem;
            border-radius: var(--radius-lg);
            position: relative;
        }
        
        .message-self {
            background-color: var(--app-message-sent);
            color: white;
            border-bottom-right-radius: 4px;
            align-self: flex-end;
            box-shadow: var(--shadow-sm);
        }
        
        .message-other {
            background-color: var(--app-message-received);
            color: var(--app-text-primary);
            border-bottom-left-radius: 4px;
            align-self: flex-start;
            box-shadow: var(--shadow-sm);
        }
        
        .message-content {
            line-height: 1.5;
            word-break: break-word;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: var(--app-timestamp);
            display: flex;
            align-items: center;
            gap: 0.25rem;
            margin-top: 0.5rem;
        }
        
        .message-self .message-time {
            color: rgba(255, 255, 255, 0.65);
            justify-content: flex-end;
        }
        
        /* Message with attachment */
        .message-attachment {
            margin-top: 0.75rem;
            margin-bottom: 0.5rem;
        }
        
        .attachment-preview {
            max-width: 200px;
            max-height: 200px;
            border-radius: var(--radius-md);
            overflow: hidden;
            margin-bottom: 0.5rem;
        }
        
        .attachment-preview img {
            width: 100%;
            height: auto;
            object-fit: cover;
            display: block;
        }
        
        .attachment-file {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1rem;
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: var(--radius-md);
        }
        
        [data-theme="dark"] .attachment-file {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .message-self .attachment-file {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .attachment-icon {
            font-size: 1.5rem;
            color: var(--app-primary);
        }
        
        .message-self .attachment-icon {
            color: white;
        }
        
        .attachment-info {
            flex: 1;
            min-width: 0;
        }
        
        .attachment-name {
            font-size: 0.875rem;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .attachment-size {
            font-size: 0.75rem;
            color: var(--app-text-secondary);
        }
        
        .message-self .attachment-size {
            color: rgba(255, 255, 255, 0.65);
        }
        
        .attachment-action {
            color: var(--app-primary);
            background: none;
            border: none;
            font-size: 1.125rem;
            cursor: pointer;
            transition: all var(--transition-fast);
        }
        
        .message-self .attachment-action {
            color: white;
        }
        
        .attachment-action:hover {
            transform: scale(1.1);
        }
        
        /* Typing Indicator */
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border-radius: var(--radius-md);
            background-color: var(--app-component-bg);
            color: var(--app-text-secondary);
            font-size: 0.875rem;
            margin-top: 0.5rem;
            animation: fadeIn 0.3s ease;
            max-width: max-content;
        }
        
        .typing-dots {
            display: flex;
            align-items: center;
            gap: 0.125rem;
        }
        
        .typing-dot {
            width: 5px;
            height: 5px;
            border-radius: 50%;
            background-color: var(--app-text-secondary);
            animation: typingDotBounce 1.4s infinite ease-in-out both;
        }
        
        .typing-dot:nth-child(1) {
            animation-delay: -0.32s;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: -0.16s;
        }
        
        @keyframes typingDotBounce {
            0%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-4px); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* Message Input */
        .chat-input-container {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--app-divider);
            background-color: var(--app-card-bg);
            transition: all var(--transition-base);
        }
        
        .message-form {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }
        
        .form-group {
            flex: 1;
            position: relative;
        }
        
        .chat-textarea {
            width: 100%;
            padding: 0.875rem 3.5rem 0.875rem 1rem;
            border-radius: var(--radius-full);
            border: 1px solid var(--app-divider);
            background-color: var(--app-component-bg);
            color: var(--app-text-primary);
            resize: none;
            min-height: 48px;
            max-height: 150px;
            transition: all var(--transition-base);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
        }
        
        .chat-textarea:focus {
            outline: none;
            border-color: var(--app-primary);
            box-shadow: 0 0 0 3px rgba(0, 113, 227, 0.2);
        }
        
        .textarea-actions {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            gap: 0.5rem;
        }
        
        .textarea-action {
            background: none;
            border: none;
            color: var(--app-text-secondary);
            cursor: pointer;
            transition: all var(--transition-fast);
            font-size: 1.125rem;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: var(--radius-full);
        }
        
        .textarea-action:hover {
            color: var(--app-primary);
            background-color: var(--app-component-bg);
        }
        
        .send-button {
            background-color: var(--app-primary);
            color: white;
            border: none;
            border-radius: var(--radius-full);
            width: 46px;
            height: 46px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.125rem;
            cursor: pointer;
            transition: all var(--transition-base);
            flex-shrink: 0;
            box-shadow: 0 2px 8px rgba(0, 113, 227, 0.4);
        }
        
        .send-button:hover {
            background-color: var(--app-primary-dark);
            transform: translateY(-2px) rotate(15deg);
            box-shadow: 0 4px 12px rgba(0, 113, 227, 0.6);
        }
        
        /* File input */
        .file-input {
            position: absolute;
            left: -9999px;
            visibility: hidden;
        }
        
        /* Emoji picker */
        .emoji-picker {
            position: absolute;
            bottom: calc(100% + 10px);
            right: 0;
            background-color: var(--app-card-bg);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            width: 320px;
            max-width: 90vw;
            max-height: 350px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transition: all var(--transition-base);
            z-index: 100;
            transform-origin: bottom right;
            opacity: 0;
            transform: scale(0.95);
            visibility: hidden;
            border: 1px solid var(--app-divider);
        }
        
        .emoji-picker.show {
            opacity: 1;
            transform: scale(1);
            visibility: visible;
        }
        
        .emoji-picker-header {
            padding: 1rem;
            border-bottom: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .emoji-picker-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--app-text-primary);
        }
        
        .emoji-picker-close {
            background: none;
            border: none;
            color: var(--app-text-secondary);
            font-size: 1.125rem;
            cursor: pointer;
            transition: color var(--transition-fast);
        }
        
        .emoji-picker-close:hover {
            color: var(--app-primary);
        }
        
        .emoji-picker-tabs {
            display: flex;
            border-bottom: 1px solid var(--app-divider);
            padding: 0 0.5rem;
        }
        
        .emoji-tab {
            padding: 0.75rem;
            font-size: 1.25rem;
            background: none;
            border: none;
            cursor: pointer;
            color: var(--app-text-secondary);
            position: relative;
        }
        
        .emoji-tab.active {
            color: var(--app-primary);
        }
        
        .emoji-tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: var(--app-primary);
        }
        
        .emoji-content {
            padding: 1rem;
            overflow-y: auto;
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 0.5rem;
            max-height: 250px;
        }
        
        .emoji-item {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            cursor: pointer;
            border-radius: var(--radius-sm);
            transition: all var(--transition-fast);
        }
        
        .emoji-item:hover {
            background-color: var(--app-component-bg);
            transform: scale(1.1);
        }
        
        /* Call Modals */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--app-overlay);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all var(--transition-base);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal {
            background-color: var(--app-card-bg);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-xl);
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.95);
            opacity: 0;
            transition: all var(--transition-base);
        }
        
        .modal-overlay.show .modal {
            transform: scale(1);
            opacity: 1;
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--app-text-primary);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .modal-close {
            background: none;
            border: none;
            color: var(--app-text-secondary);
            font-size: 1.25rem;
            cursor: pointer;
            transition: color var(--transition-fast), transform var(--transition-base);
        }
        
        .modal-close:hover {
            color: var(--app-primary);
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid var(--app-divider);
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .call-modal-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1.5rem;
            padding: 1rem 0;
        }
        
        .call-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--app-primary), var(--app-primary-dark));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2.5rem;
            font-weight: 600;
            position: relative;
        }
        
        .call-ringing-animation {
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            border-radius: 50%;
            border: 3px solid var(--app-primary);
            animation: ringPulse 2s infinite;
            opacity: 0;
        }
        
        @keyframes ringPulse {
            0% {
                transform: scale(0.8);
                opacity: 0.8;
            }
            100% {
                transform: scale(1.2);
                opacity: 0;
            }
        }
        
        .call-user-name {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--app-text-primary);
        }
        
        .call-status {
            font-size: 1rem;
            color: var(--app-text-secondary);
        }
        
        .call-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .call-action {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all var(--transition-base);
            border: none;
        }
        
        .call-accept {
            background-color: var(--app-success);
            color: white;
            box-shadow: 0 4px 12px rgba(50, 215, 75, 0.4);
        }
        
        .call-accept:hover {
            transform: translateY(-4px) scale(1.05);
            box-shadow: 0 6px 16px rgba(50, 215, 75, 0.5);
        }
        
        .call-decline {
            background-color: var(--app-error);
            color: white;
            box-shadow: 0 4px 12px rgba(255, 59, 48, 0.4);
        }
        
        .call-decline:hover {
            transform: translateY(-4px) scale(1.05);
            box-shadow: 0 6px 16px rgba(255, 59, 48, 0.5);
        }
        
        .call-video-container {
            width: 100%;
            height: 350px;
            background-color: var(--app-secondary);
            border-radius: var(--radius-md);
            position: relative;
            overflow: hidden;
        }
        
        .call-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .video-controls {
            position: absolute;
            bottom: 1rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            gap: 1rem;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 0.5rem 1rem;
            border-radius: var(--radius-full);
            backdrop-filter: blur(10px);
        }
        
        .video-control {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            cursor: pointer;
            transition: all var(--transition-base);
            border: none;
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .video-control:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }
        
        .video-control.active {
            background-color: var(--app-primary);
        }
        
        .video-end {
            background-color: var(--app-error);
        }
        
        /* Footer */
        .footer {
            position: fixed;
            bottom: 10px;
            left: 10px;
            font-size: 0.75rem;
            color: var(--app-text-secondary);
            opacity: 0.7;
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            z-index: 50;
        }
        
        /* Animations */
        .animate-in {
            animation: fadeAndSlide 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards;
            opacity: 0;
            transform: translateY(30px);
        }
        
        @keyframes fadeAndSlide {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .delay-1 { animation-delay: 0.1s; }
        .delay-2 { animation-delay: 0.2s; }
        .delay-3 { animation-delay: 0.3s; }
        
        /* Toast Notification */
        .toast {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: var(--radius-md);
            background-color: rgba(50, 50, 50, 0.95);
            color: white;
            box-shadow: var(--shadow-lg);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transform: translateY(100px);
            opacity: 0;
            transition: all var(--transition-base);
            z-index: 9999;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            max-width: 400px;
        }
        
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .toast i {
            font-size: 1.25rem;
        }
        
        .toast.success {
            background-color: rgba(50, 215, 75, 0.95);
        }
        
        .toast.error {
            background-color: rgba(255, 59, 48, 0.95);
        }
        
        /* Responsive Design */
        @media (max-width: 1200px) {
            .participants-sidebar {
                width: 250px;
            }
        }
        
        @media (max-width: 992px) {
            .content-wrapper {
                flex-direction: column;
                height: auto;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
                flex-direction: row;
                justify-content: center;
                padding: 1rem;
                border-right: none;
                border-bottom: 1px solid var(--app-divider);
            }
            
            .sidebar:hover {
                width: 100%;
            }
            
            .sidebar-nav {
                flex-direction: row;
                justify-content: center;
                margin-top: 0;
            }
            
            .sidebar-nav-item {
                padding: 0.5rem 1rem;
            }
            
            .sidebar-nav-icon {
                margin-right: 0;
            }
            
            .sidebar-nav-text {
                display: none;
            }
            
            .chat-container {
                flex-direction: column;
                height: calc(100vh - 130px);
            }
            
            .participants-sidebar {
                width: 100%;
                height: auto;
                max-height: 200px;
            }
            
            .chat-main {
                height: calc(100% - 200px);
            }
        }
        
        @media (max-width: 768px) {
            .navbar-container {
                padding: 0 1rem;
            }
            
            .logo span {
                display: none;
            }
            
            .mobile-toggle {
                display: block;
            }
            
            .nav-links {
                display: none;
                position: absolute;
                top: 70px;
                left: 0;
                right: 0;
                background-color: var(--app-background);
                flex-direction: column;
                padding: 1rem;
                border-bottom: 1px solid var(--app-divider);
                box-shadow: var(--shadow-md);
                z-index: 1000;
            }
            
            .nav-links.active {
                display: flex;
            }
            
            .chat-header,
            .chat-input-container {
                padding: 1rem;
            }
            
            .messages-container {
                padding: 1rem;
            }
            
            .message-group {
                max-width: 85%;
            }
            
            .theme-toggle {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="app-container" id="app">
        <!-- Navigation Bar -->
        <nav class="navbar">
            <div class="navbar-container">
                <a href="/dashboard" class="logo">
                    <i class="fas fa-utensils"></i>
                    <span>RestMatch</span>
                </a>
                
                <button class="mobile-toggle" id="mobileToggle">
                    <i class="fas fa-bars"></i>
                </button>
                
                <ul class="nav-links" id="navLinks">
                    <li><a href="/dashboard">
                        <i class="fas fa-home"></i> Dashboard
                    </a></li>
                    <li><a href="/profile">
                        <i class="fas fa-user"></i> Profilo
                    </a></li>
                    <li><a href="/chat" class="active">
                        <i class="fas fa-comments"></i> Chat
                    </a></li>
                    <li><a href="/ajax">
                        <i class="fas fa-search"></i> Ricerca
                    </a></li>
                    <li>
                        <div class="online-indicator">
                            <i class="fas fa-circle"></i>
                            <span id="online-counter">5</span> online
                        </div>
                    </li>
                </ul>
                
                <div style="display: flex; align-items: center; gap: 1rem;">
                    <div class="theme-toggle" id="themeToggle">
                        <i class="fas fa-sun"></i>
                        <i class="fas fa-moon"></i>
                        <div class="theme-toggle-slider"></div>
                    </div>
                    
                    <a href="/logout" class="btn btn-secondary">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>
            </div>
        </nav>
    
        <div class="content-wrapper">
            <!-- Sidebar -->
            <aside class="sidebar">
                <nav class="sidebar-nav">
                    <a href="/dashboard" class="sidebar-nav-item">
                        <div class="sidebar-nav-icon">
                            <i class="fas fa-home"></i>
                        </div>
                        <span class="sidebar-nav-text">Dashboard</span>
                    </a>
                    <a href="/profile" class="sidebar-nav-item">
                        <div class="sidebar-nav-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        <span class="sidebar-nav-text">Profilo</span>
                    </a>
                    <a href="/chat" class="sidebar-nav-item active">
                        <div class="sidebar-nav-icon">
                            <i class="fas fa-comments"></i>
                        </div>
                        <span class="sidebar-nav-text">Chat</span>
                    </a>
                    <a href="/ajax" class="sidebar-nav-item">
                        <div class="sidebar-nav-icon">
                            <i class="fas fa-search"></i>
                        </div>
                        <span class="sidebar-nav-text">Ricerca</span>
                    </a>
                    <a href="/logout" class="sidebar-nav-item">
                        <div class="sidebar-nav-icon">
                            <i class="fas fa-sign-out-alt"></i>
                        </div>
                        <span class="sidebar-nav-text">Logout</span>
                    </a>
                </nav>
            </aside>
    
            <!-- Main Content -->
            <main class="chat-container">
                <!-- Participants Sidebar -->
                <div class="participants-sidebar">
                    <div class="participants-header">
                        <h2 class="participants-title">
                            <i class="fas fa-users"></i> Partecipanti
                        </h2>
                        <div class="participants-actions">
                            <button class="participant-action" id="addParticipantBtn" title="Aggiungi partecipante">
                                <i class="fas fa-user-plus"></i>
                            </button>
                        </div>
                    </div>
                    
                    <ul class="participants-list" id="participants-list">
                        {{#each participants}}
                        <li class="participant-item" data-user-id="{{id}}">
                            <div class="participant-info">
                                <div class="participant-avatar">
                                    {{email.[0]}}
                                    <div class="avatar-status offline"></div>
                                </div>
                                <div class="participant-details">
                                    <div class="participant-name">{{email}}</div>
                                    <div class="participant-role">{{#if role}}{{role}}{{else}}Utente{{/if}}</div>
                                </div>
                            </div>
                            <div class="status-badge offline">Offline</div>
                        </li>
                        {{/each}}
                    </ul>
                    
                    <div class="participants-footer">
                        <a href="/chat" class="btn btn-secondary btn-block">
                            <i class="fas fa-arrow-left"></i> Lista chat
                        </a>
                    </div>
                </div>
                
                <!-- Chat Main Area -->
                <div class="chat-main">
                    <div class="chat-header">
                        <div class="room-info">
                            <div class="room-avatar">
                                {{room.name.[0]}}
                            </div>
                            <div class="room-details">
                                <h3 class="room-name">{{room.name}}</h3>
                                <div class="room-participants">
                                    <i class="fas fa-users"></i> {{participants.length}} partecipanti
                                </div>
                            </div>
                        </div>
                        <div class="room-actions">
                            <button class="room-action" id="phoneCallBtn" data-tooltip="Chiamata vocale">
                                <i class="fas fa-phone-alt"></i>
                            </button>
                            <button class="room-action" id="videoCallBtn" data-tooltip="Videochiamata">
                                <i class="fas fa-video"></i>
                            </button>
                            <button class="room-action" id="infoBtn" data-tooltip="Informazioni">
                                <i class="fas fa-info-circle"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="messages-container" id="messages-container">
                        <div class="date-divider">
                            <div class="date-divider-line"></div>
                            <div class="date-divider-text">Oggi</div>
                            <div class="date-divider-line"></div>
                        </div>
                        
                        {{#each messages}}
                        <div class="message-group {{#if isSelf}}message-group-self{{else}}message-group-other{{/if}} animate-in delay-{{@index}}">
                            {{#unless isSelf}}
                            <div class="message-sender-info">
                                <div class="message-sender-avatar">{{sender.[0]}}</div>
                                <div class="message-sender-name">{{sender}}</div>
                            </div>
                            {{/unless}}
                            <div class="message {{#if isSelf}}message-self{{else}}message-other{{/if}}">
                                <div class="message-content">{{content}}</div>
                                {{#if attachment}}
                                <div class="message-attachment">
                                    {{#if (isImage attachment)}}
                                    <div class="attachment-preview">
                                        <img src="/uploads/{{attachment}}" alt="Immagine allegata">
                                    </div>
                                    {{else}}
                                    <div class="attachment-file">
                                        <i class="fas fa-file-alt attachment-icon"></i>
                                        <div class="attachment-info">
                                            <div class="attachment-name">{{attachment}}</div>
                                            <div class="attachment-size">{{fileSize}}</div>
                                        </div>
                                        <button class="attachment-action" data-file="{{attachment}}" title="Scarica">
                                            <i class="fas fa-download"></i>
                                        </button>
                                    </div>
                                    {{/if}}
                                </div>
                                {{/if}}
                                <div class="message-time">
                                    <i class="{{#if isSelf}}{{#if delivered}}fas fa-check-double{{else}}fas fa-check{{/if}}{{/if}}"></i>
                                    <span>{{timestamp}}</span>
                                </div>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                    
                    <div id="typing-indicator" class="typing-indicator" style="display: none;">
                        <span id="typing-text">Qualcuno sta scrivendo</span>
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                    
                    <div class="chat-input-container">
                        <form id="message-form" class="message-form">
                            <div class="form-group">
                                <textarea id="message-input" class="chat-textarea" placeholder="Scrivi un messaggio..." required></textarea>
                                <div class="textarea-actions">
                                    <button type="button" class="textarea-action" id="emojiBtn" title="Emoji">
                                        <i class="far fa-smile"></i>
                                    </button>
                                    <button type="button" class="textarea-action" id="attachBtn" title="Allega file">
                                        <i class="fas fa-paperclip"></i>
                                    </button>
                                </div>
                                
                                <!-- Emoji Picker -->
                                <div class="emoji-picker" id="emojiPicker">
                                    <div class="emoji-picker-header">
                                        <div class="emoji-picker-title">Emoji</div>
                                        <button class="emoji-picker-close">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="emoji-picker-tabs">
                                        <button class="emoji-tab active" data-tab="smileys">
                                            <i class="far fa-smile"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="people">
                                                                                  <button class="emoji-tab" data-tab="people">
                                            <i class="fas fa-user"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="nature">
                                            <i class="fas fa-leaf"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="food">
                                            <i class="fas fa-hamburger"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="activities">
                                            <i class="fas fa-basketball-ball"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="travel">
                                            <i class="fas fa-car"></i>
                                        </button>
                                        <button class="emoji-tab" data-tab="symbols">
                                            <i class="fas fa-heart"></i>
                                        </button>
                                    </div>
                                    <div class="emoji-content" id="emojiContent">
                                        <!-- Emoji content will be generated by JavaScript -->
                                    </div>
                                </div>
                                
                                <!-- File input hidden element -->
                                <input type="file" id="fileInput" class="file-input">
                            </div>
                            <button type="submit" class="send-button" id="sendBtn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>
    
    <!-- Phone Call Modal -->
    <div class="modal-overlay" id="phoneCallModal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-phone-alt"></i> Chiamata vocale
                </h2>
                <button class="modal-close" id="closePhoneModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="call-modal-content">
                    <div class="call-avatar">
                        <div class="call-ringing-animation"></div>
                        <span id="callUserInitial"></span>
                    </div>
                    <div class="call-user-name" id="callUserName"></div>
                    <div class="call-status" id="callStatus">Chiamata in corso...</div>
                    <div class="call-actions">
                        <button class="call-action call-decline" id="declineCall">
                            <i class="fas fa-phone-slash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Video Call Modal -->
    <div class="modal-overlay" id="videoCallModal">
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-video"></i> Videochiamata
                </h2>
                <button class="modal-close" id="closeVideoModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="call-video-container">
                    <video class="call-video" id="remoteVideo" autoplay playsinline></video>
                    <video class="call-video" id="localVideo" autoplay playsinline style="position: absolute; bottom: 16px; right: 16px; width: 120px; height: 90px; border-radius: 8px; border: 2px solid white;"></video>
                    
                    <div class="video-controls">
                        <button class="video-control" id="toggleMic" title="Microfono">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button class="video-control" id="toggleCamera" title="Camera">
                            <i class="fas fa-video"></i>
                        </button>
                        <button class="video-control video-end" id="endVideoCall" title="Termina chiamata">
                            <i class="fas fa-phone-slash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toast-message"></span>
    </div>
    
    <!-- Footer with time and user info -->
    <div class="footer">
        <div>⏱️ Data e ora: <span id="current-date">2025-05-05 07:34:51</span></div>
        <div>👤 Utente: <span id="current-user">quartifabrizio</span></div>
    </div>

    <script>
        // DOM Elements
        const app = document.getElementById('app');
        const themeToggle = document.getElementById('themeToggle');
        const mobileToggle = document.getElementById('mobileToggle');
        const navLinks = document.getElementById('navLinks');
        const messagesContainer = document.getElementById('messages-container');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const typingIndicator = document.getElementById('typing-indicator');
        const typingText = document.getElementById('typing-text');
        const onlineCounter = document.getElementById('online-counter');
        const participantsList = document.getElementById('participants-list');
        const sendBtn = document.getElementById('sendBtn');
        const emojiBtn = document.getElementById('emojiBtn');
        const emojiPicker = document.getElementById('emojiPicker');
        const emojiContent = document.getElementById('emojiContent');
        const emojiTabs = document.querySelectorAll('.emoji-tab');
        const emojiPickerClose = document.querySelector('.emoji-picker-close');
        const attachBtn = document.getElementById('attachBtn');
        const fileInput = document.getElementById('fileInput');
        const phoneCallBtn = document.getElementById('phoneCallBtn');
        const videoCallBtn = document.getElementById('videoCallBtn');
        const infoBtn = document.getElementById('infoBtn');
        const phoneCallModal = document.getElementById('phoneCallModal');
        const videoCallModal = document.getElementById('videoCallModal');
        const closePhoneModal = document.getElementById('closePhoneModal');
        const closeVideoModal = document.getElementById('closeVideoModal');
        const callUserName = document.getElementById('callUserName');
        const callUserInitial = document.getElementById('callUserInitial');
        const callStatus = document.getElementById('callStatus');
        const declineCall = document.getElementById('declineCall');
        const toggleMic = document.getElementById('toggleMic');
        const toggleCamera = document.getElementById('toggleCamera');
        const endVideoCall = document.getElementById('endVideoCall');
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');
        const addParticipantBtn = document.getElementById('addParticipantBtn');
        
        // App State
        const state = {
            socket: null,
            roomId: "{{roomId}}",
            userId: {{user.id}},
            userName: "{{user.email}}",
            typingTimeout: null,
            isTyping: false,
            attachedFile: null,
            callActive: false,
            videoCallActive: false,
            micEnabled: true,
            cameraEnabled: true,
            participants: [],
            emojis: {
                smileys: ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊', '😋', '😎', '😍', '😘', '😗', '😙', '😚', '🙂', '🤗', '🤔', '😐', '😑', '😶', '🙄', '😏', '😣', '😥', '😮', '🤐', '😯', '😪', '😫', '😴', '😌', '🤓', '😛', '😜', '😝', '🤤', '😒', '😓', '😔', '😕', '🙃', '🤑', '😲', '☹️', '🙁', '😖', '😞', '😟', '😤', '😢', '😭', '😦', '😧', '😨', '😩', '😬', '😰', '😱', '😳', '🤪', '😵', '😡', '😠', '🤬', '😷', '🤒', '🤕', '🤢', '🤮', '🤧'],
                people: ['👶', '👦', '👧', '👨', '👩', '👴', '👵', '👨‍⚕️', '👩‍⚕️', '👨‍🎓', '👩‍🎓', '👨‍🏫', '👩‍🏫', '👨‍⚖️', '👩‍⚖️', '👨‍🌾', '👩‍🌾', '👨‍🍳', '👩‍🍳', '👨‍🔧', '👩‍🔧', '👨‍🏭', '👩‍🏭', '👨‍💻', '👩‍💻', '👨‍💼', '👩‍💼', '👨‍🔬', '👩‍🔬', '👨‍🎨', '👩‍🎨', '👨‍🚀', '👩‍🚀', '👨‍✈️', '👩‍✈️', '👮', '👮‍♀️', '🕵️', '🕵️‍♀️', '💂', '💂‍♀️', '👷', '👷‍♀️', '🤴', '👸', '👳', '👳‍♀️', '👲', '🧕', '🤵', '👰', '🤰', '🤱'],
                nature: ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯', '🦁', '🐮', '🐷', '🐸', '🐵', '🐔', '🐧', '🐦', '🐤', '🐣', '🦆', '🦅', '🦉', '🦇', '🐺', '🐗', '🐴', '🦄', '🐝', '🐛', '🦋', '🐌', '🐞', '🐜', '🦗', '🕷', '🦂', '🦟', '🦠', '🐢', '🐍', '🦎', '🦖', '🦕', '🐙', '🦑', '🦐', '🦞', '🦀', '🐡', '🐠', '🐟', '🐬', '🐳', '🐋', '🦈', '🐊', '🐅', '🐆', '🦓', '🦍', '🐘', '🦏'],
                food: ['🍏', '🍎', '🍐', '🍊', '🍋', '🍌', '🍉', '🍇', '🍓', '🍈', '🍒', '🍑', '🥭', '🍍', '🥥', '🥝', '🍅', '🍆', '🥑', '🥦', '🥬', '🥒', '🌶️', '🌽', '🥕', '🥔', '🍠', '🥐', '🥯', '🍞', '🥖', '🥨', '🧀', '🥚', '🍳', '🥞', '🥓', '🥩', '🍗', '🍖', '🦴', '🌭', '🍔', '🍟', '🍕', '🥪', '🥙', '🌮', '🌯', '🥗', '🥘', '🥫', '🍝', '🍜', '🍲', '🍛', '🍣', '🍱', '🥟', '🍤', '🍙', '🍚', '🍘', '🍥', '🥠', '🥮', '🍢', '🍡', '🍧', '🍨', '🍦', '🥧', '🍰', '🧁', '🍮', '🎂', '🍭', '🍬', '🍫', '🍿', '🧂', '🍩', '🍪', '🌰', '🥜', '☕', '🍵', '🥤', '🍶', '🍺', '🍻', '🥂', '🍷', '🥃', '🍸', '🍹', '🍾'],
                activities: ['⚽', '🏀', '🏈', '⚾', '🥎', '🎾', '🏐', '🏉', '🥏', '🎱', '🏓', '🏸', '🏒', '🏑', '🥍', '🏏', '⛳', '🏹', '🎣', '🥊', '🥋', '🎽', '⛸️', '🥌', '🛷', '🛹', '🎿', '⛷️', '🏂', '🏋️', '🤼', '🤸', '⛹️', '🤺', '🤾', '🏌️', '🏇', '🧘', '🏄', '🏊', '🤽', '🚣', '🧗', '🚵', '🚴', '🎪', '🎭', '🎨', '🎬', '🎤', '🎧', '🎼', '🎹', '🥁', '🎷', '🎺', '🎸', '🎻', '🎲', '🧩', '♟️', '🎯', '🎳', '🎮', '🎰'],
                travel: ['🚗', '🚕', '🚙', '🚌', '🚎', '🏎️', '🚓', '🚑', '🚒', '🚐', '🚚', '🚛', '🚜', '🛴', '🚲', '🛵', '🏍️', '🚨', '🚔', '🚍', '🚘', '🚖', '🚡', '🚠', '🚟', '🚃', '🚋', '🚞', '🚝', '🚄', '🚅', '🚈', '🚂', '🚆', '🚇', '🚊', '🚉', '✈️', '🛫', '🛬', '🛩️', '💺', '🛰️', '🚀', '🛸', '🚁', '🛶', '⛵', '🚤', '🛥️', '🛳️', '⛴️', '🚢', '⚓', '⛽', '🚧', '🚦', '🚥', '🚏', '🗺️', '🗿', '🗽', '🗼', '🏰', '🏯', '🏟️', '🎡', '🎢', '🎠', '⛲', '⛱️', '🏖️', '🏝️', '🏜️', '🌋', '⛰️', '🏔️', '🗻', '🏕️', '⛺', '🏠', '🏡', '🏘️', '🏚️', '🏗️', '🏭', '🏢', '🏬', '🏣', '🏤', '🏥', '🏦', '🏨', '🏪', '🏫', '🏩', '💒', '🏛️', '⛪', '🕌', '🕍', '🕋', '⛩️'],
                symbols: ['❤️', '🧡', '💛', '💚', '💙', '💜', '🖤', '💔', '❣️', '💕', '💞', '💓', '💗', '💖', '💘', '💝', '💟', '☮️', '✝️', '☪️', '🕉️', '☸️', '✡️', '🔯', '🕎', '☯️', '☦️', '🛐', '⛎', '♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓', '🆔', '⚛️', '🉑', '☢️', '☣️', '📴', '📳', '🈶', '🈚', '🈸', '🈺', '🈷️', '✴️', '🆚', '💮', '🉐', '㊙️', '㊗️', '🈴', '🈵', '🈹', '🈲', '🅰️', '🅱️', '🆎', '🆑', '🅾️', '🆘', '⛔', '📛', '🚫', '❌', '⭕', '💢', '♨️', '🚷', '🚯', '🚳', '🚱', '🔞', '📵', '🚭']
            },
            currentEmojiTab: 'smileys'
        };
        
        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeTheme();
            initializeMobileMenu();
            initializeChat();
            initializeEmojiPicker();
            initializeAttachments();
            initializeCalls();
            
            // Set current date and time in footer
            const currentDateElem = document.getElementById('current-date');
            const currentUserElem = document.getElementById('current-user');
            
            if (currentDateElem) currentDateElem.textContent = '2025-05-05 07:34:51';
            if (currentUserElem) currentUserElem.textContent = 'quartifabrizio';
        });
        
        // Theme toggle functionality
        function initializeTheme() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            if (savedTheme === 'dark') {
                app.setAttribute('data-theme', 'dark');
            }
            
            if (themeToggle) {
                themeToggle.addEventListener('click', () => {
                    const currentTheme = app.getAttribute('data-theme') || 'light';
                    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                    
                    app.setAttribute('data-theme', newTheme);
                    localStorage.setItem('theme', newTheme);
                    
                    // Animate theme change
                    document.body.style.transition = 'background-color 0.5s ease, color 0.5s ease';
                });
            }
        }
        
        // Mobile menu toggle
        function initializeMobileMenu() {
            if (mobileToggle && navLinks) {
                mobileToggle.addEventListener('click', function() {
                    navLinks.classList.toggle('active');
                    
                    if (navLinks.classList.contains('active')) {
                        mobileToggle.innerHTML = '<i class="fas fa-times"></i>';
                    } else {
                        mobileToggle.innerHTML = '<i class="fas fa-bars"></i>';
                    }
                });
            }
        }
        
        // Socket.io and chat functionality
        function initializeChat() {
            // Connect to Socket.io
            state.socket = io();
            
            // Authenticate socket
            state.socket.emit('authenticate', { userId: state.userId });
            
            // Join the current room
            state.socket.emit('join room', {
                room_id: state.roomId,
                user_id: state.userId
            });
            
            // Initial scroll to bottom
            scrollToBottom();
            
            // Listen for new messages
            state.socket.on('chat message', function(message) {
                if (message.roomId === state.roomId) {
                    addMessage(message);
                    
                    // Play notification sound for messages from others
                    if (message.senderId !== state.userId) {
                        playNotificationSound();
                    }
                }
            });
            
            // Listen for typing events
            state.socket.on('user typing', function(data) {
                if (data.roomId === state.roomId && data.userId !== state.userId) {
                    if (data.isTyping) {
                        if (typingText) typingText.textContent = `${data.userName || 'Qualcuno'} sta scrivendo`;
                        if (typingIndicator) typingIndicator.style.display = 'flex';
                        scrollToBottom();
                    } else {
                        if (typingIndicator) typingIndicator.style.display = 'none';
                    }
                }
            });
            
            // Listen for user status changes
            state.socket.on('user status', function(data) {
                updateParticipantStatus(data.userId, data.status);
            });
            
            // Update online users counter
            state.socket.on('update online users', function(count) {
                if (onlineCounter) onlineCounter.textContent = count;
            });
            
            // Listen for file uploads
            state.socket.on('file uploaded', function(data) {
                if (data.roomId === state.roomId) {
                    // File was uploaded successfully, now send the message with the attachment
                    const message = {
                        roomId: state.roomId,
                        content: data.message || '',
                        attachment: data.filename,
                        fileSize: data.fileSize,
                        fileType: data.fileType
                    };
                    
                    // Send message with attachment
                    state.socket.emit('chat message', message);
                }
            });
            
            // Handle message form submission
            if (messageForm && messageInput) {
                messageForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    sendMessage();
                });
                
                // Handle typing events
                messageInput.addEventListener('input', function() {
                    // Resize textarea based on content
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                    if (this.scrollHeight > 150) {
                        this.style.height = '150px';
                    }
                    
                    // Handle typing indicator
                    if (!state.isTyping) {
                        state.isTyping = true;
                        state.socket.emit('typing', { 
                            roomId: state.roomId, 
                            isTyping: true,
                            userId: state.userId,
                            userName: state.userName
                        });
                    }
                    
                    // Reset typing timeout
                    clearTimeout(state.typingTimeout);
                    state.typingTimeout = setTimeout(function() {
                        state.isTyping = false;
                        state.socket.emit('typing', { 
                            roomId: state.roomId, 
                            isTyping: false,
                            userId: state.userId
                        });
                    }, 1000);
                });
            }
            
            // Add Participant Button
            if (addParticipantBtn) {
                addParticipantBtn.addEventListener('click', function() {
                    showToast('Funzionalità "Aggiungi partecipante" sarà disponibile presto!', 'info');
                });
            }
            
            // Cleanup when leaving the page
            window.addEventListener('beforeunload', function() {
                state.socket.emit('leave room', {
                    room_id: state.roomId,
                    user_id: state.userId
                });
            });
        }
        
        // Send message function
        function sendMessage() {
            const message = messageInput.value.trim();
            
            // Don't send if message is empty and no file is attached
            if (!message && !state.attachedFile) return;
            
            // If a file is attached, handle file upload first
            if (state.attachedFile) {
                const formData = new FormData();
                formData.append('file', state.attachedFile);
                formData.append('roomId', state.roomId);
                formData.append('message', message);
                
                // Show loading state
                sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                sendBtn.disabled = true;
                
                fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Errore durante l\'upload del file');
                    }
                    return response.json();
                })
                .then(data => {
                    // File uploaded successfully, the socket will handle the message
                    // Reset UI
                    resetMessageInput();
                })
                .catch(error => {
                    showToast('Errore durante l\'upload del file', 'error');
                    console.error('Upload error:', error);
                    
                    // Reset UI
                    sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
                    sendBtn.disabled = false;
                });
            } else {
                // No file, just send the text message
                state.socket.emit('chat message', {
                    roomId: state.roomId,
                    content: message,
                    senderId: state.userId,
                    sender: state.userName,
                    timestamp: new Date().toISOString()
                });
                
                // Reset input
                resetMessageInput();
            }
        }
        
        // Reset message input after sending
        function resetMessageInput() {
            messageInput.value = '';
            messageInput.style.height = 'auto';
            
            // Reset typing indicator
            state.isTyping = false;
            clearTimeout(state.typingTimeout);
            state.socket.emit('typing', { 
                roomId: state.roomId, 
                isTyping: false,
                userId: state.userId
            });
            
            // Reset file attachment
            state.attachedFile = null;
            
            // Reset button
            sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
            sendBtn.disabled = false;
            
            // Focus on input
            messageInput.focus();
        }
        
        // Add message to the UI
        function addMessage(message) {
            if (!messagesContainer) return;
            
            const isSelf = message.senderId === state.userId;
            const messageGroupClass = isSelf ? 'message-group-self' : 'message-group-other';
            const messageClass = isSelf ? 'message-self' : 'message-other';
            
            const messageGroup = document.createElement('div');
            messageGroup.className = `message-group ${messageGroupClass}`;
            
            // Add sender info for other people's messages
            if (!isSelf) {
                const senderInfo = document.createElement('div');
                senderInfo.className = 'message-sender-info';
                senderInfo.innerHTML = `
                    <div class="message-sender-avatar">${message.sender ? message.sender[0] : '?'}</div>
                    <div class="message-sender-name">${message.sender}</div>
                `;
                messageGroup.appendChild(senderInfo);
            }
            
            const messageEl = document.createElement('div');
            messageEl.className = `message ${messageClass}`;
            
            // Message content
            const contentEl = document.createElement('div');
            contentEl.className = 'message-content';
            contentEl.textContent = message.content;
            messageEl.appendChild(contentEl);
            
            // File attachment if any
            if (message.attachment) {
                const attachmentContainer = document.createElement('div');
                attachmentContainer.className = 'message-attachment';
                
                const isImage = /\.(jpeg|jpg|gif|png|webp|bmp)$/i.test(message.attachment);
                
                if (isImage) {
                    attachmentContainer.innerHTML = `
                        <div class="attachment-preview">
                            <img src="/uploads/${message.attachment}" alt="Immagine allegata">
                        </div>
                    `;
                } else {
                    attachmentContainer.innerHTML = `
                        <div class="attachment-file">
                            <i class="fas fa-file-alt attachment-icon"></i>
                            <div class="attachment-info">
                                <div class="attachment-name">${message.attachment}</div>
                                <div class="attachment-size">${message.fileSize || 'File'}</div>
                            </div>
                            <button class="attachment-action" data-file="${message.attachment}" title="Scarica">
                                <i class="fas fa-download"></i>
                            </button>
                        </div>
                    `;
                }
                
                messageEl.appendChild(attachmentContainer);
            }
            
            // Message timestamp
            const timeEl = document.createElement('div');
            timeEl.className = 'message-time';
            
            const formattedTime = formatTime(message.timestamp);
            timeEl.innerHTML = `
                ${isSelf ? '<i class="fas fa-check"></i>' : ''}
                <span>${formattedTime}</span>
            `;
            messageEl.appendChild(timeEl);
            
            messageGroup.appendChild(messageEl);
            messagesContainer.appendChild(messageGroup);
            
            // Add click event to download attachment
            const downloadBtns = messageGroup.querySelectorAll('.attachment-action');
            downloadBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const filename = this.getAttribute('data-file');
                    if (filename) {
                        downloadFile(filename);
                    }
                });
            });
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        // Download attachment
        function downloadFile(filename) {
            window.open(`/uploads/${filename}`, '_blank');
        }
        
        // Format timestamp
        function formatTime(timestamp) {
            if (!timestamp) return '';
            
            const date = new Date(timestamp);
            const now = new Date();
            const isToday = date.toDateString() === now.toDateString();
            
            if (isToday) {
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            } else {
                return `${date.toLocaleDateString([], { day: 'numeric', month: 'short' })} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
            }
        }
        
        // Update participant status in the UI
        function updateParticipantStatus(userId, status) {
            const participantItems = document.querySelectorAll(`#participants-list li[data-user-id="${userId}"]`);
            
            participantItems.forEach(item => {
                const badge = item.querySelector('.status-badge');
                const avatarStatus = item.querySelector('.avatar-status');
                
                if (badge) {
                    if (status === 'online') {
                        badge.className = 'status-badge online';
                        badge.innerHTML = '<span>Online</span>';
                    } else {
                        badge.className = 'status-badge offline';
                        badge.innerHTML = '<span>Offline</span>';
                    }
                }
                
                if (avatarStatus) {
                    if (status === 'online') {
                        avatarStatus.className = 'avatar-status online';
                    } else {
                        avatarStatus.className = 'avatar-status offline';
                    }
                }
            });
        }
        
        // Scroll to bottom of messages smoothly
        function scrollToBottom() {
            if (messagesContainer) {
                messagesContainer.scrollTo({
                    top: messagesContainer.scrollHeight,
                    behavior: 'smooth'
                });
            }
        }
        
        // Initialize emoji picker
        function initializeEmojiPicker() {
            // Populate the first tab
            populateEmojiTab(state.currentEmojiTab);
            
            // Handle emoji button click
            if (emojiBtn && emojiPicker) {
                emojiBtn.addEventListener('click', function() {
                    emojiPicker.classList.toggle('show');
                });
                
                // Close emoji picker
                emojiPickerClose.addEventListener('click', function() {
                    emojiPicker.classList.remove('show');
                });
                
                // Close emoji picker when clicking outside
                document.addEventListener('click', function(e) {
                    if (!emojiBtn.contains(e.target) && 
                        !emojiPicker.contains(e.target)) {
                        emojiPicker.classList.remove('show');
                    }
                });
                
                // Handle tab switching
                emojiTabs.forEach(tab => {
                    tab.addEventListener('click', function() {
                        const tabName = this.getAttribute('data-tab');
                        
                        // Remove active class from all tabs
                        emojiTabs.forEach(t => t.classList.remove('active'));
                        
                        // Add active class to clicked tab
                        this.classList.add('active');
                        
                        // Update current tab and populate emojis
                        state.currentEmojiTab = tabName;
                        populateEmojiTab(tabName);
                    });
                });
            }
        }
        
        // Populate emoji tab with emojis
        function populateEmojiTab(tabName) {
            if (!emojiContent) return;
            
            // Clear current content
            emojiContent.innerHTML = '';
            
            // Get emojis for current tab
            const emojis = state.emojis[tabName] || [];
            
            // Add emoji items
            emojis.forEach(emoji => {
                const emojiItem = document.createElement('div');
                emojiItem.className = 'emoji-item';
                emojiItem.textContent = emoji;
                emojiItem.addEventListener('click', function() {
                    insertEmoji(emoji);
                });
                
                emojiContent.appendChild(emojiItem);
            });
        }
        
        // Insert emoji into message input
        function insertEmoji(emoji) {
            if (!messageInput) return;
            
            // Get cursor position
            const startPos = messageInput.selectionStart;
            const endPos = messageInput.selectionEnd;
            const text = messageInput.value;
            
            // Insert emoji at cursor position
            messageInput.value = text.substring(0, startPos) + emoji + text.substring(endPos);
            
            // Reset cursor position after emoji
            messageInput.selectionStart = messageInput.selectionEnd = startPos + emoji.length;
            
            // Focus back on input
            messageInput.focus();
        }
        
        // Initialize file attachments
        function initializeAttachments() {
            if (attachBtn && fileInput) {
                // Open file picker
                attachBtn.addEventListener('click', function() {
                    fileInput.click();
                });
                
                // Handle file selection
                fileInput.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        const file = this.files[0];
                        
                        // Check file size (max 10MB)
                        if (file.size > 10 * 1024 * 1024) {
                            showToast('Il file è troppo grande! Massimo 10MB consentiti.', 'error');
                            return;
                        }
                        
                        // Store the file
                        state.attachedFile = file;
                        
                        // Update UI to show selected file
                        showToast(`File allegato: ${file.name}`, 'success');
                        
                        // Change attach button to indicate attachment
                        attachBtn.innerHTML = '<i class="fas fa-paperclip" style="color: var(--app-primary);"></i>';
                    }
                });
            }
        }
        
        // Initialize call functionality
        function initializeCalls() {
            // Phone call
            if (phoneCallBtn && phoneCallModal && closePhoneModal) {
                // Show phone call modal
                phoneCallBtn.addEventListener('click', function() {
                    // Check if any participant has a phone number
                    const hasPhoneNumber = document.querySelectorAll('.participant-item')
                        .length > 1; // At least one other participant
                    
                    if (!hasPhoneNumber) {
                        showToast('Nessun partecipante con numero di telefono disponibile', 'info');
                        return;
                    }
                    
                    // Set up call UI
                    callUserName.textContent = document.querySelector('.room-name').textContent;
                    callUserInitial.textContent = document.querySelector('.room-name').textContent.charAt(0);
                    callStatus.textContent = 'Chiamata in corso...';
                    
                    // Show modal
                    phoneCallModal.classList.add('show');
                    
                    // Simulate call after 2 seconds
                    setTimeout(() => {
                        callStatus.textContent = 'Connesso';
                        state.callActive = true;
                        
                        // Play call sound
                        playCallSound();
                    }, 2000);
                });
                
                // Close phone call modal
                closePhoneModal.addEventListener('click', function() {
                    phoneCallModal.classList.remove('show');
                    state.callActive = false;
                    stopCallSound();
                });
                
                // Decline call
                declineCall.addEventListener('click', function() {
                    phoneCallModal.classList.remove('show');
                    state.callActive = false;
                    stopCallSound();
                    
                    showToast('Chiamata terminata', 'info');
                });
            }
            
            // Video call
            if (videoCallBtn && videoCallModal && closeVideoModal) {
                // Show video call modal
                videoCallBtn.addEventListener('click', function() {
                    videoCallModal.classList.add('show');
                    
                    // Simulate video initialization
                    setTimeout(() => {
                        state.videoCallActive = true;
                        
                        // Request camera and microphone access
                        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                            .then(stream => {
                                // Show local video
                                if (localVideo) {
                                    localVideo.srcObject = stream;
                                }
                                
                                // Simulate remote video after 1 second
                                setTimeout(() => {
                                    if (remoteVideo) {
                                        // Use local stream as remote for demo
                                        remoteVideo.srcObject = stream;
                                    }
                                }, 1000);
                            })
                            .catch(error => {
                                console.error('Error accessing media devices:', error);
                                showToast('Errore nell\'accesso alla fotocamera o al microfono', 'error');
                            });
                    }, 500);
                });
                
                // Close video call modal
                closeVideoModal.addEventListener('click', endVideoCallFunc);
                endVideoCall.addEventListener('click', endVideoCallFunc);
                
                // Toggle microphone
                if (toggleMic) {
                    toggleMic.addEventListener('click', function() {
                        if (!localVideo || !localVideo.srcObject) return;
                        
                        const audioTracks = localVideo.srcObject.getAudioTracks();
                        if (audioTracks.length === 0) return;
                        
                        const enabled = !audioTracks[0].enabled;
                        audioTracks[0].enabled = enabled;
                        
                        // Update UI
                        state.micEnabled = enabled;
                        this.innerHTML = enabled ? 
                            '<i class="fas fa-microphone"></i>' : 
                            '<i class="fas fa-microphone-slash"></i>';
                        
                        this.classList.toggle('active', !enabled);
                    });
                }
                
                // Toggle camera
                if (toggleCamera) {
                    toggleCamera.addEventListener('click', function() {
                        if (!localVideo || !localVideo.srcObject) return;
                        
                        const videoTracks = localVideo.srcObject.getVideoTracks();
                        if (videoTracks.length === 0) return;
                        
                        const enabled = !videoTracks[0].enabled;
                        videoTracks[0].enabled = enabled;
                        
                        // Update UI
                        state.cameraEnabled = enabled;
                        this.innerHTML = enabled ? 
                            '<i class="fas fa-video"></i>' : 
                            '<i class="fas fa-video-slash"></i>';
                        
                        this.classList.toggle('active', !enabled);
                    });
                }
            }
            
            // Info button
            if (infoBtn) {
                infoBtn.addEventListener('click', function() {
                    showToast('Informazioni su questa chat disponibili presto!', 'info');
                });
            }
        }
        
        // End video call
        function endVideoCallFunc() {
            videoCallModal.classList.remove('show');
            state.videoCallActive = false;
            
            // Stop all media tracks
            if (localVideo && localVideo.srcObject) {
                localVideo.srcObject.getTracks().forEach(track => track.stop());
                localVideo.srcObject = null;
            }
            
            if (remoteVideo) {
                remoteVideo.srcObject = null;
            }
            
            // Reset UI
            if (toggleMic) {
                toggleMic.innerHTML = '<i class="fas fa-microphone"></i>';
                toggleMic.classList.remove('active');
            }
            
            if (toggleCamera) {
                toggleCamera.innerHTML = '<i class="fas fa-video"></i>';
                toggleCamera.classList.remove('active');
            }
            
            state.micEnabled = true;
            state.cameraEnabled = true;
        }
        
        // Audio functions
        let callSound = null;
        
        function playNotificationSound() {
            const audio = new Audio('/sounds/notification.mp3');
            audio.play().catch(e => console.log('Sound play prevented by browser policy'));
        }
        
        function playCallSound() {
            callSound = new Audio('/sounds/call-ring.mp3');
            callSound.loop = true;
            callSound.play().catch(e => console.log('Sound play prevented by browser policy'));
        }
        
        function stopCallSound() {
            if (callSound) {
                callSound.pause();
                callSound.currentTime = 0;
            }
        }
        
        // Show toast notifications
        function showToast(message, type = 'success') {
            if (!toast || !toastMessage) return;
            
            // Set icon based on type
            const iconMap = {
                success: 'check-circle',
                error: 'exclamation-circle',
                info: 'info-circle',
                warning: 'exclamation-triangle'
            };
            
            const icon = iconMap[type] || 'info-circle';
            toast.innerHTML = `<i class="fas fa-${icon}"></i><span id="toast-message">${message}</span>`;
            
            toast.className = `toast ${type}`;
            toast.classList.add('show');
            
            // Auto hide after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3500);
        }
    </script>
</body>
</html>